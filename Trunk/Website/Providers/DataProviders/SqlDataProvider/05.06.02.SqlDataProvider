/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/


/* Update UpdatePortalInfo */
/***************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}UpdatePortalInfo]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}UpdatePortalInfo
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdatePortalInfo
	@PortalID           int,
	@PortalName         nvarchar(128),
	@LogoFile           nvarchar(50),
	@FooterText         nvarchar(100),
	@ExpiryDate         datetime,
	@UserRegistration   int,
	@BannerAdvertising  int,
	@Currency           char(3),
	@AdministratorId    int,
	@HostFee            money,
	@HostSpace          int,
	@PageQuota          int,
	@UserQuota          int,
	@PaymentProcessor   nvarchar(50),
	@ProcessorUserId    nvarchar(50),
	@ProcessorPassword  nvarchar(50),
	@Description        nvarchar(500),
	@KeyWords           nvarchar(500),
	@BackgroundFile     nvarchar(50),
	@SiteLogHistory     int,
	@SplashTabId        int,
	@HomeTabId          int,
	@LoginTabId         int,
	@RegisterTabId      int,
	@UserTabId          int,
	@SearchTabId          int,
	@DefaultLanguage    nvarchar(10),
	@HomeDirectory		varchar(100),
	@LastModifiedByUserID	int,
	@CultureCode   nvarchar(50)

AS

	UPDATE {databaseOwner}{objectQualifier}Portals
		SET    
		   ExpiryDate = @ExpiryDate,
		   UserRegistration = @UserRegistration,
		   BannerAdvertising = @BannerAdvertising,
		   Currency = @Currency,
		   AdministratorId = @AdministratorId,
		   HostFee = @HostFee,
		   HostSpace = @HostSpace,
		   PageQuota = @PageQuota,
		   UserQuota = @UserQuota,
		   PaymentProcessor = @PaymentProcessor,
		   ProcessorUserId = @ProcessorUserId,
		   ProcessorPassword = @ProcessorPassword,
		   SiteLogHistory = @SiteLogHistory,
		   DefaultLanguage = @DefaultLanguage,
		   HomeDirectory = @HomeDirectory,
		   LastModifiedByUserID = @LastModifiedByUserID,
		   LastModifiedOnDate = getdate()
	WHERE  PortalId = @PortalID

IF EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}PortalLocalization WHERE PortalId = @PortalID AND CultureCode = @CultureCode)
	BEGIN 
		UPDATE {databaseOwner}{objectQualifier}PortalLocalization
		SET
			PortalName = @PortalName,
			LogoFile = @LogoFile,
			FooterText = @FooterText,
			Description = @Description,
			KeyWords = @KeyWords,
			BackgroundFile = @BackgroundFile,
			HomeTabId = @HomeTabId,
			LoginTabId = @LoginTabId,
			RegisterTabId = @RegisterTabId,
			UserTabId = @UserTabId,
			SplashTabId = @SplashTabId,
			SearchTabId = @SearchTabId,
			LastModifiedByUserID = @LastModifiedByUserID,
			LastModifiedOnDate = getdate()
		WHERE	PortalId = @PortalID AND CultureCode = @CultureCode
	END 
ELSE
	BEGIN 
		DECLARE @AdminTabId int
		SET @AdminTabId = (SELECT AdminTabId 
								FROM {databaseOwner}{objectQualifier}PortalLocalization 
								WHERE PortalID = @PortalID and CultureCode='en-US')

		INSERT INTO {databaseOwner}{objectQualifier}PortalLocalization (
			[PortalID],
			[CultureCode],
			[PortalName],
			[LogoFile],
			[FooterText],
			[Description],
			[KeyWords],
			[BackgroundFile],
			[HomeTabId],
			[LoginTabId],
			[UserTabId],
			[AdminTabId],
			[SplashTabId],
			[SearchTabId],
			[CreatedByUserID],
			[CreatedOnDate],
			[LastModifiedByUserID],
			[LastModifiedOnDate]
		)
		VALUES (
			@PortalID,
			@CultureCode,
			@PortalName,
			@LogoFile, 
			@FooterText,
			@Description,
			@KeyWords,
			@BackgroundFile,
			@HomeTabId ,
			@LoginTabId ,
			@UserTabId,
			@AdminTabid,
			@SplashTabId  ,
			@SearchTabId,
			-1,
			getdate(),
			-1,
			getdate()
		)
	END
GO


/* Add new DataType */
/********************/

INSERT INTO {databaseOwner}{objectQualifier}Lists (
		ListName, 
		Value, 
		Text, 
		ParentID, 
		Level, 
		SortOrder, 
		DefinitionID, 
		PortalID, 
		SystemList
		)
	VALUES (
		'DataType', 
		'TimeZoneInfo', 
		'DotNetNuke.Web.UI.WebControls.DnnTimeZoneEditControl, DotNetNuke.Web', 
		0, 
		0, 
		0, 
		-1, 
		-1, 
		1
		)
GO

/* Update EnsureLocalizationExists        */
/* Update to prevent inserting cutlture   */
/* for non-installed languages            */
/******************************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}EnsureLocalizationExists]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}EnsureLocalizationExists
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}EnsureLocalizationExists
	@PortalId       int,
	@CultureCode	nvarchar(10)
AS
	IF NOT EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}PortalLocalization WHERE CultureCode=@CultureCode AND Portalid=@PortalId)
		BEGIN
			DECLARE @PortalName nvarchar(128)
			DECLARE @LogoFile nvarchar(50)
			DECLARE @FooterText nvarchar(100)
			DECLARE @Description nvarchar(500)
			DECLARE @KeyWords nvarchar(500)
			DECLARE @BackgroundFile nvarchar(50)
			DECLARE @HomeTabId int
			DECLARE @LoginTabId int
			DECLARE @UserTabId int
			DECLARE @AdminTabId int
			DECLARE @RegisterTabId int
	
			DECLARE @defaultlanguage nvarchar(10)
			
			SELECT @defaultlanguage= DefaultLanguage FROM {databaseOwner}{objectQualifier}Portals WHERE Portalid=@PortalId

			IF EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}PortalLocalization WHERE CultureCode=@defaultlanguage AND Portalid=@PortalId)
        AND EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}Languages l INNER JOIN {databaseOwner}{objectQualifier}PortalLanguages pl ON l.LanguageID = pl.LanguageID WHERE pl.PortalID = @PortalID AND l.CultureCode = @CultureCode )
				BEGIN
					--clone the default language
					SELECT 
						@PortalName = PortalName,
						@LogoFile = LogoFile,
						@FooterText = FooterText,
						@Description = Description,
						@KeyWords = KeyWords,
						@BackgroundFile = BackgroundFile,
						@HomeTabId = HomeTabId,
						@LoginTabId = LoginTabId,
						@UserTabId = UserTabId,
						@AdminTabId = AdminTabId,
						@RegisterTabId = RegisterTabId 
					FROM {databaseOwner}{objectQualifier}PortalLocalization WHERE CultureCode=@defaultlanguage AND Portalid=@PortalId
						
					INSERT INTO {databaseOwner}{objectQualifier}PortalLocalization (
						PortalId,
						CultureCode,
						PortalName,
						LogoFile,
						FooterText,
						Description,
						KeyWords,
						BackgroundFile, 
						HomeTabId,
						LoginTabId,
						UserTabId,
						AdminTabId,
						RegisterTabId,
						CreatedByUserID,
						CreatedOnDate,
						LastModifiedByUserID,
						LastModifiedOnDate
						) 
						VALUES	(
							@PortalId,
							@CultureCode,
							@PortalName,
							@LogoFile,
							@FooterText,
							@Description,
							@KeyWords,
							@BackgroundFile,
							@HomeTabId,
							@LoginTabId,
							@UserTabId,
							@AdminTabId,
							@RegisterTabId,
							-1,
							getdate(),
							-1,
							getdate()
						)
				END
			ELSE
				BEGIN
					IF EXISTS (select * from {databaseOwner}{objectQualifier}PortalLocalization where CultureCode='en-us' and Portalid=@PortalId)
						BEGIN
							--if defaultlanguage is missing clone en-us if available
							SELECT 
								@PortalName = PortalName,
								@LogoFile = LogoFile,
								@FooterText = FooterText,
								@Description = Description,
								@KeyWords = KeyWords,
								@BackgroundFile = BackgroundFile,
								@HomeTabId = HomeTabId,
								@LoginTabId=LoginTabId,
								@UserTabId=UserTabId,
								@AdminTabId=AdminTabId,
								@RegisterTabId=RegisterTabId 
							FROM {databaseOwner}{objectQualifier}PortalLocalization where CultureCode='en-us' and Portalid=@PortalId
							
							INSERT INTO {databaseOwner}{objectQualifier}PortalLocalization (
								PortalId,
								CultureCode,
								PortalName,
								LogoFile,
								FooterText,
								Description,
								KeyWords,
								BackgroundFile, 
								HomeTabId,
								LoginTabId,
								UserTabId,
								AdminTabId,
								RegisterTabId,
								CreatedByUserID,
								CreatedOnDate,
								LastModifiedByUserID,
								LastModifiedOnDate
							) 
							VALUES	(
								@PortalId,
								@CultureCode,
								@PortalName,
								@LogoFile,
								@FooterText,
								@Description,
								@KeyWords,
								@BackgroundFile,
								@HomeTabId,
								@LoginTabId,
								@UserTabId,
								@AdminTabId,
								@RegisterTabId,
								-1,
								getdate(),
								-1,
								getdate()
							)
						END
					ELSE
						BEGIN
							IF EXISTS (select top 1 * from {databaseOwner}{objectQualifier}PortalLocalization where  Portalid=@PortalId)
								BEGIN
									--cannot select by particular culturecode as defaultlanguage has been deleted (possible in early versions of DotNetNuke)
									SELECT TOP 1 
										@PortalName = PortalName,
										@LogoFile = LogoFile,
										@FooterText = FooterText,
										@Description = Description,
										@KeyWords = KeyWords,
										@BackgroundFile = BackgroundFile,
										@HomeTabId = HomeTabId,
										@LoginTabId=LoginTabId,
										@UserTabId=UserTabId,
										@AdminTabId=AdminTabId,
										@RegisterTabId=RegisterTabId 
									FROM {databaseOwner}{objectQualifier}PortalLocalization where portalid=@PortalId
									
									INSERT INTO {databaseOwner}{objectQualifier}PortalLocalization (
										PortalId,
										CultureCode,
										PortalName,
										LogoFile,
										FooterText,
										Description,
										KeyWords,
										BackgroundFile, 
										HomeTabId,
										LoginTabId,
										UserTabId,
										AdminTabId,
										RegisterTabId,
										CreatedByUserID,
										CreatedOnDate,
										LastModifiedByUserID,
										LastModifiedOnDate
									) 
									VALUES	(
										@PortalId,
										@CultureCode,
										@PortalName,
										@LogoFile,
										@FooterText,
										@Description,
										@KeyWords,
										@BackgroundFile,
										@HomeTabId,
										@LoginTabId,
										@UserTabId,
										@AdminTabId,
										@RegisterTabId,
										-1,
										getdate(),
										-1,
										getdate()
									)
								END
						END	
				END
		END
GO

/* DNN-13822 - Adjust indexes on Messaging_Messages and default fill factor */
/****************************************************************************/

ALTER TABLE {databaseOwner}{objectQualifier}Messaging_Messages DROP CONSTRAINT PK_{objectQualifier}Messaging_Messages
GO
ALTER TABLE {databaseOwner}{objectQualifier}Messaging_Messages
      ADD CONSTRAINT PK_{objectQualifier}Messaging_Messages PRIMARY KEY CLUSTERED 
      (
            MessageID
      ) WITH (
            PAD_INDEX = OFF, FILLFACTOR = 90
            , STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF
            , ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON
      )

GO

if exists (select * from dbo.sysindexes where name='IX_{objectQualifier}Messaging_Messages_ToUserID_Status_SkipPortal')
	DROP INDEX {objectQualifier}Messaging_Messages.IX_{objectQualifier}Messaging_Messages_ToUserID_Status_SkipPortal
GO

create index IX_{objectQualifier}Messaging_Messages_ToUserID_Status_SkipPortal on {databaseOwner}{objectQualifier}Messaging_Messages (
            [ToUserID] ASC, [Status] ASC, [SkipPortal] ASC, [Date] DESC
      )
GO

if exists (select * from dbo.sysindexes where name='IX_{objectQualifier}Messaging_Messages_FromUserID_Status')
	DROP INDEX {objectQualifier}Messaging_Messages.IX_{objectQualifier}Messaging_Messages_FromUserID_Status
GO

create index IX_{objectQualifier}Messaging_Messages_FromUserID_Status on {databaseOwner}{objectQualifier}Messaging_Messages (
            [FromUserID] ASC, [Status] ASC, [Date] DESC
      )
GO

if exists (select * from dbo.sysindexes where name='IX_{objectQualifier}Messaging_Messages_EmailSent_EmailSchedulerInstance_Status')
	DROP INDEX {objectQualifier}Messaging_Messages.IX_{objectQualifier}Messaging_Messages_EmailSent_EmailSchedulerInstance_Status
GO

create index IX_{objectQualifier}Messaging_Messages_EmailSent_EmailSchedulerInstance_Status on {databaseOwner}{objectQualifier}Messaging_Messages (
            [EmailSent] ASC, [EmailSchedulerInstance] ASC, [Status] ASC, [Date] DESC
      )
GO
/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/