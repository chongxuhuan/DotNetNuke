/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/
/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Mobile_PreviewProfiles]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}Mobile_PreviewProfiles]
		(
			[Id] [int] IDENTITY(1,1) NOT NULL,
			[PortalId] [int] NOT NULL,
			[Name] [nvarchar](50) NOT NULL,
			[Width] [int] NOT NULL,
			[Height] [int] NOT NULL,
			[CreatedBy] [int] NOT NULL,
			[CreatedOn] [datetime] CONSTRAINT [DF_{objectQualifier}Mobile_PreviewProfiles_CreatedOn]  DEFAULT (getdate()) NOT NULL ,
			[LastModifiedBy] [int] NOT NULL,
			[LastModifiedOn] [datetime] CONSTRAINT [DF_{objectQualifier}Mobile_PreviewProfiles_LastModifiedOn]  DEFAULT (getdate()) NOT NULL,
			CONSTRAINT [PK_{objectQualifier}Mobile_PreviewProfiles] PRIMARY KEY CLUSTERED ( [Id] ASC )
		)
	END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Mobile_Redirections]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}Mobile_Redirections]
		(
			[Id] [int] IDENTITY(1,1) NOT NULL,
			[PortalId] [int] NOT NULL,
			[Name] [nvarchar](50) NOT NULL,
			[Type] [int] NOT NULL,
			[SortOrder] [int] CONSTRAINT [DF_{objectQualifier}Mobile_Redirections_SortOrder]  DEFAULT ((0)) NOT NULL,
			[SourceTabId] [int] NOT NULL,
			[TargetType] [int] NOT NULL,
			[TargetValue] [nvarchar](260) NOT NULL,
			[CreatedBy] [int] NOT NULL,
			[CreatedOn] [datetime] CONSTRAINT [DF_{objectQualifier}Mobile_Redirections_CreatedOn]  DEFAULT (getdate()) NOT NULL ,
			[LastModifiedBy] [int] NOT NULL,
			[LastModifiedOn] [datetime] CONSTRAINT [DF_{objectQualifier}Mobile_Redirections_LastModifiedOn]  DEFAULT (getdate()) NOT NULL,
			CONSTRAINT [PK_{objectQualifier}Mobile_Redirections] PRIMARY KEY CLUSTERED ([Id] ASC)
		)

		ALTER TABLE {databaseOwner}[{objectQualifier}Mobile_Redirections]  
			ADD CONSTRAINT [FK_{objectQualifier}Mobile_Redirections_{objectQualifier}Portals] FOREIGN KEY([PortalId]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])

	END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Mobile_RedirectionRules]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}Mobile_RedirectionRules]
		(
			[Id] [int] IDENTITY(1,1) NOT NULL,
			[RedirectionId] [int] NOT NULL,
			[Capability] [nvarchar](50) NOT NULL,
			[Expression] [nvarchar](50) NOT NULL,
			CONSTRAINT [PK_{objectQualifier}Mobile_RedirectionRules] PRIMARY KEY CLUSTERED ([Id] ASC)
		)

		ALTER TABLE {databaseOwner}[{objectQualifier}Mobile_RedirectionRules]  
			ADD CONSTRAINT [FK_{objectQualifier}Mobile_RedirectionRules_{objectQualifier}Mobile_Redirections] FOREIGN KEY([RedirectionId]) REFERENCES {databaseOwner}[{objectQualifier}Mobile_Redirections] ([Id])

	END
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_DeletePreviewProfile] @Id INT
AS 
		
    DELETE  FROM {databaseOwner}{objectQualifier}Mobile_PreviewProfiles
    WHERE   Id = @Id

GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_DeleteRedirection] @Id INT
AS 
    DELETE  FROM {databaseOwner}{objectQualifier}Mobile_RedirectionRules
    WHERE   RedirectionId = @id
		
    DELETE  FROM {databaseOwner}{objectQualifier}Mobile_Redirections
    WHERE   Id = @Id

GO
	
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_DeleteRedirectionRule] @Id INT
AS 
    DELETE  FROM {databaseOwner}{objectQualifier}Mobile_RedirectionRules
    WHERE   Id = @id

GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_GetPreviewProfiles] @PortalId INT
AS 
    SELECT  Id, PortalId, Name, Width, Height, CreatedBy, CreatedOn, LastModifiedBy, LastModifiedOn
    FROM    {databaseOwner}{objectQualifier}Mobile_PreviewProfiles
    WHERE   PortalId = @PortalId

GO
	
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_GetRedirectionRules] @RedirectionId INT
AS 
    SELECT  Id ,
            RedirectionId ,
            Capability ,
            Expression
    FROM    {objectQualifier}Mobile_RedirectionRules
    WHERE RedirectionId = @RedirectionId

GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_GetRedirections] @PortalId INT
AS 
    SELECT  Id ,
            PortalId ,
            Name ,
            [Type] ,
            SortOrder ,
            SourceTabId ,
            TargetType ,
            TargetValue ,
            CreatedBy ,
            CreatedOn ,
            LastModifiedBy ,
            LastModifiedOn
    FROM    {databaseOwner}{objectQualifier}Mobile_Redirections
    WHERE   PortalId = @PortalId

GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_SavePreviewProfile]
    @Id INT ,
    @PortalId INT ,
    @Name NVARCHAR(50) ,
    @Width INT ,
    @Height INT ,
    @UserId INT
AS 
    IF ( @Id = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}Mobile_PreviewProfiles
                    ( PortalId ,
                      Name ,
                      Width ,
                      Height ,
                      CreatedBy ,
                      CreatedOn ,
                      LastModifiedBy ,
                      LastModifiedOn
			        
                    )
            VALUES  ( @PortalId , -- PortalId - int
                      @Name , -- Name - nvarchar(50)
                      @Width , -- Width - int
                      @Height , -- Height - int
                      @UserId , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @UserId , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime
			        
                    )
                    
            SELECT  @Id = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}Mobile_PreviewProfiles
            SET     Name = @Name ,
                    Width = @Width ,
                    Height = @Height ,
                    LastModifiedBy = @UserId ,
                    LastModifiedOn = GETDATE()
            WHERE   Id = @Id
        END
        
    SELECT  @Id

GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_SaveRedirection]
    @Id INT ,
    @PortalId INT ,
    @Name NVARCHAR(50) ,
    @Type INT ,
    @SortOrder INT ,
    @SourceTabId INT ,
    @TargetType INT ,
    @TargetValue NVARCHAR(50) ,
    @UserId INT
AS 
    IF ( @Id = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}Mobile_Redirections
                    ( PortalId ,
                      Name ,
                      Type ,
                      SortOrder ,
                      SourceTabId ,
                      TargetType ,
                      TargetValue ,
                      CreatedBy ,
                      CreatedOn ,
                      LastModifiedBy ,
                      LastModifiedOn
			        
                    )
            VALUES  ( @PortalId , -- PortalId - int
                      @Name , -- Name - nvarchar(50)
                      @Type , -- Type - int
                      @SortOrder , -- SortOrder - int
                      @SourceTabId , -- SourceTabId - int
                      @TargetType ,
                      @TargetValue ,
                      @UserId , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @UserId , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime
			        
                    )
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}Mobile_Redirections
            SET     Name = @Name ,
                    [Type] = @Type ,
                    SortOrder = @SortOrder ,
                    SourceTabId = @SourceTabId ,
                    TargetType = @TargetType ,
                    TargetValue = @TargetValue ,
                    LastModifiedBy = @UserId ,
                    LastModifiedOn = GETDATE()
            WHERE   Id = @Id
        END
	

GO

CREATE PROC {databaseOwner}[{objectQualifier}Mobile_SaveRedirectionRule]
    @Id INT ,
    @RedirectionId INT ,
    @Capbility NVARCHAR(50) ,
    @Expression NVARCHAR(50)
AS 
    IF @Id = -1 
        BEGIN
            INSERT  INTO {databaseOwner}{objectQualifier}Mobile_RedirectionRules
                    ( RedirectionId ,
                      Capability ,
                      Expression
		        )
            VALUES  ( @RedirectionId , -- RedirectionId - int
                      @Capbility , -- Capability - nvarchar(50)
                      @Expression  -- Expression - nvarchar(50)
		        )
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}Mobile_RedirectionRules
            SET     Capability = @Capbility ,
                    Expression = @Expression
            WHERE   Id = @Id
        END

GO

/* Add PortalGroups Table */
/**************************/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}PortalGroup]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}PortalGroups]
		(
			[PortalGroupID] [int] IDENTITY(1,1) NOT NULL,
			[MasterPortalID] [int] NULL,
			[PortalGroupName] [nvarchar](100) NULL,
			[PortalGroupDescription] [nvarchar](2000) NULL,
			[CreatedByUserID] [int] NULL,
			[CreatedOnDate] [datetime] NULL,
			[LastModifiedByUserID] [int] NULL,
			[LastModifiedOnDate] [datetime] NULL,
			CONSTRAINT [PK_{objectQualifier}PortalGroup] PRIMARY KEY CLUSTERED  ([PortalGroupID] ASC)
		)
	END
GO

/* Add AddPortalGroup Procedure */
/********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddPortalGroup]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddPortalGroup]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddPortalGroup]
	@PortalGroupName			nvarchar(100),
	@PortalGroupDescription		nvarchar(2000),
	@CreatedByUserID			int
AS 
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}PortalGroups  
		( 
			PortalGroupName  , 
			PortalGroupDescription  , 
			CreatedByUserID , 
			CreatedOnDate , 
			LastModifiedByUserID , 
			LastModifiedOnDate  
		)  
		VALUES  
		( 
			@PortalGroupName , 
			@PortalGroupDescription , 
			@CreatedByUserID , 
			getdate() , 
			@CreatedByUserID , 
			getdate() 
		) 
		 
		SELECT SCOPE_IDENTITY()
	END
GO

/* Add DeletePortalGroup Procedure */
/***********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeletePortalGroup]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalGroup]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalGroup]
	@PortalGroupID	int
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}PortalGroups  
			WHERE PortalGroupID = @PortalGroupID
	END
GO

/* Add GetPortalGroups Procedure */
/*********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetPortalGroups]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetPortalGroups]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalGroups]

AS 
	SELECT * FROM {databaseOwner}{objectQualifier}PortalGroups 
GO

/* Add UpdatePortalGroup Procedure */
/***********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdatePortalGroup]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdatePortalGroup]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdatePortalGroup]
	@PortalGroupID				int,
	@PortalGroupName			nvarchar(100),
	@PortalGroupDescription		nvarchar(2000),
	@LastModifiedByUserID		int
AS 
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}PortalGroups 
			SET 
				PortalGroupName = @PortalGroupName,
				PortalGroupDescription = @PortalGroupDescription,
				LastModifiedByUserID = @LastModifiedByUserID,
				LastModifiedOnDate = getdate()
			WHERE PortalGroupID = @PortalGroupID
	END
GO