/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/
/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Mobile_PreviewProfiles]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}Mobile_PreviewProfiles]
		(
			[Id] [int] IDENTITY(1,1) NOT NULL,
			[PortalId] [int] NOT NULL,
			[Name] [nvarchar](50) NOT NULL,
			[Width] [int] NOT NULL,
			[Height] [int] NOT NULL,
			[CreatedByUserID] [int] NOT NULL,
			[CreatedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}Mobile_PreviewProfiles_CreatedOnDate]  DEFAULT (getdate()) NOT NULL ,
			[LastModifiedByUserID] [int] NOT NULL,
			[LastModifiedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}Mobile_PreviewProfiles_LastModifiedOnDate]  DEFAULT (getdate()) NOT NULL,
			CONSTRAINT [PK_{objectQualifier}Mobile_PreviewProfiles] PRIMARY KEY CLUSTERED ( [Id] ASC )
		)
	END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Mobile_Redirections]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}Mobile_Redirections]
		(
			[Id] [int] IDENTITY(1,1) NOT NULL,
			[PortalId] [int] NOT NULL,
			[Name] [nvarchar](50) NOT NULL,
			[Type] [int] NOT NULL,
			[SortOrder] [int] CONSTRAINT [DF_{objectQualifier}Mobile_Redirections_SortOrder]  DEFAULT ((0)) NOT NULL,
			[SourceTabId] [int] NOT NULL,
			[IncludeChildTabs] [BIT] NOT NULL,
			[TargetType] [int] NOT NULL,
			[TargetValue] [nvarchar](260) NOT NULL,
			[Enabled] BIT NOT NULL,
			[CreatedByUserID] [int] NOT NULL,
			[CreatedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}Mobile_Redirections_CreatedOnDate]  DEFAULT (getdate()) NOT NULL ,
			[LastModifiedByUserID] [int] NOT NULL,
			[LastModifiedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}Mobile_Redirections_LastModifiedOnDate]  DEFAULT (getdate()) NOT NULL,
			CONSTRAINT [PK_{objectQualifier}Mobile_Redirections] PRIMARY KEY CLUSTERED ([Id] ASC)
		)

		ALTER TABLE {databaseOwner}[{objectQualifier}Mobile_Redirections]  
			ADD CONSTRAINT [FK_{objectQualifier}Mobile_Redirections_{objectQualifier}Portals] FOREIGN KEY([PortalId]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
		
		CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Mobile_Redirections_SortOrder] ON {databaseOwner}[{objectQualifier}Mobile_Redirections] ([SortOrder] ASC)
	END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Mobile_RedirectionRules]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}Mobile_RedirectionRules]
		(
			[Id] [int] IDENTITY(1,1) NOT NULL,
			[RedirectionId] [int] NOT NULL,
			[Capability] [nvarchar](50) NOT NULL,
			[Expression] [nvarchar](50) NOT NULL,
			CONSTRAINT [PK_{objectQualifier}Mobile_RedirectionRules] PRIMARY KEY CLUSTERED ([Id] ASC)
		)

		ALTER TABLE {databaseOwner}[{objectQualifier}Mobile_RedirectionRules]  
			ADD CONSTRAINT [FK_{objectQualifier}Mobile_RedirectionRules_{objectQualifier}Mobile_Redirections] FOREIGN KEY([RedirectionId]) REFERENCES {databaseOwner}[{objectQualifier}Mobile_Redirections] ([Id])

	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Mobile_DeletePreviewProfile]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Mobile_DeletePreviewProfile]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_DeletePreviewProfile] @Id INT
AS 
		
    DELETE  FROM {databaseOwner}{objectQualifier}Mobile_PreviewProfiles
    WHERE   Id = @Id

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Mobile_DeleteRedirection]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Mobile_DeleteRedirection]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_DeleteRedirection] @Id INT
AS 
    DELETE  FROM {databaseOwner}{objectQualifier}Mobile_RedirectionRules
    WHERE   RedirectionId = @id
		
    DELETE  FROM {databaseOwner}{objectQualifier}Mobile_Redirections
    WHERE   Id = @Id

GO
	
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Mobile_DeleteRedirectionRule]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Mobile_DeleteRedirectionRule]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_DeleteRedirectionRule] @Id INT
AS 
    DELETE  FROM {databaseOwner}{objectQualifier}Mobile_RedirectionRules
    WHERE   Id = @id

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Mobile_GetPreviewProfiles]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Mobile_GetPreviewProfiles]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_GetPreviewProfiles] @PortalId INT
AS 
    SELECT  Id, PortalId, Name, Width, Height, CreatedByUserID, CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}Mobile_PreviewProfiles
    WHERE   PortalId = @PortalId

GO
	
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Mobile_GetRedirectionRules]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Mobile_GetRedirectionRules]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_GetRedirectionRules] @RedirectionId INT
AS 
    SELECT  Id ,
            RedirectionId ,
            Capability ,
            Expression
    FROM    {objectQualifier}Mobile_RedirectionRules
    WHERE RedirectionId = @RedirectionId

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Mobile_GetRedirections]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Mobile_GetRedirections]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_GetRedirections] @PortalId INT
AS 
    SELECT  Id ,
            PortalId ,
            Name ,
            [Type] ,
            SortOrder ,
            SourceTabId ,
			IncludeChildTabs ,
            TargetType ,
            TargetValue ,
			Enabled ,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}Mobile_Redirections
    WHERE   PortalId = @PortalId
	ORDER BY SortOrder ASC

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Mobile_SavePreviewProfile]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Mobile_SavePreviewProfile]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_SavePreviewProfile]
    @Id INT ,
    @PortalId INT ,
    @Name NVARCHAR(50) ,
    @Width INT ,
    @Height INT ,
    @UserId INT
AS 
    IF ( @Id = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}Mobile_PreviewProfiles
                    ( PortalId ,
                      Name ,
                      Width ,
                      Height ,
                      CreatedByUserID ,
                      CreatedOnDate ,
                      LastModifiedByUserID ,
                      LastModifiedOnDate
			        
                    )
            VALUES  ( @PortalId , -- PortalId - int
                      @Name , -- Name - nvarchar(50)
                      @Width , -- Width - int
                      @Height , -- Height - int
                      @UserId , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @UserId , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime
			        
                    )
                    
            SELECT  @Id = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}Mobile_PreviewProfiles
            SET     Name = @Name ,
                    Width = @Width ,
                    Height = @Height ,
                    LastModifiedByUserID = @UserId ,
                    LastModifiedOnDate = GETDATE()
            WHERE   Id = @Id
        END
        
    SELECT  @Id

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Mobile_SaveRedirection]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Mobile_SaveRedirection]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_SaveRedirection]
    @Id INT ,
    @PortalId INT ,
    @Name NVARCHAR(50) ,
    @Type INT ,
    @SortOrder INT ,
    @SourceTabId INT ,
	@IncludeChildTabs BIT ,
    @TargetType INT ,
    @TargetValue NVARCHAR(50) ,
	@Enabled BIT,
    @UserId INT
AS 
    IF ( @Id = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}Mobile_Redirections
                    ( PortalId ,
                      Name ,
                      Type ,
                      SortOrder ,
                      SourceTabId ,
					  IncludeChildTabs ,
                      TargetType ,
                      TargetValue ,
					  Enabled ,
                      CreatedByUserID ,
                      CreatedOnDate ,
                      LastModifiedByUserID ,
                      LastModifiedOnDate			        
                    )
            VALUES  ( @PortalId , -- PortalId - int
                      @Name , -- Name - nvarchar(50)
                      @Type , -- Type - int
                      @SortOrder , -- SortOrder - int
                      @SourceTabId , -- SourceTabId - int
					  @IncludeChildTabs ,
                      @TargetType ,
                      @TargetValue ,
					  @Enabled ,
                      @UserId , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @UserId , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime			        
                    )
		SELECT  @Id = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}Mobile_Redirections
            SET     Name = @Name ,
                    [Type] = @Type ,
                    SortOrder = @SortOrder ,
                    SourceTabId = @SourceTabId ,
					IncludeChildTabs = @IncludeChildTabs ,
                    TargetType = @TargetType ,
                    TargetValue = @TargetValue ,
					Enabled = @Enabled ,
                    LastModifiedByUserID = @UserId ,
                    LastModifiedOnDate = GETDATE()
            WHERE   Id = @Id
			SELECT @Id
        END
	

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Mobile_SaveRedirectionRule]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Mobile_SaveRedirectionRule]
GO

CREATE PROC {databaseOwner}[{objectQualifier}Mobile_SaveRedirectionRule]
    @Id INT ,
    @RedirectionId INT ,
    @Capbility NVARCHAR(50) ,
    @Expression NVARCHAR(50)
AS 
    IF @Id = -1 
        BEGIN
            INSERT  INTO {databaseOwner}{objectQualifier}Mobile_RedirectionRules
                    ( RedirectionId ,
                      Capability ,
                      Expression
		        )
            VALUES  ( @RedirectionId , -- RedirectionId - int
                      @Capbility , -- Capability - nvarchar(50)
                      @Expression  -- Expression - nvarchar(50)
		        )
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}Mobile_RedirectionRules
            SET     Capability = @Capbility ,
                    Expression = @Expression
            WHERE   Id = @Id
        END

GO

/* Add PortalGroups Table */
/**************************/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}PortalGroup]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}PortalGroups]
		(
			[PortalGroupID] [int] IDENTITY(1,1) NOT NULL,
			[MasterPortalID] [int] NULL,
			[PortalGroupName] [nvarchar](100) NULL,
			[PortalGroupDescription] [nvarchar](2000) NULL,
			[CreatedByUserID] [int] NULL,
			[CreatedOnDate] [datetime] NULL,
			[LastModifiedByUserID] [int] NULL,
			[LastModifiedOnDate] [datetime] NULL,
			CONSTRAINT [PK_{objectQualifier}PortalGroup] PRIMARY KEY CLUSTERED  ([PortalGroupID] ASC)
		)
	END
GO

/* Add AddPortalGroup Procedure */
/********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddPortalGroup]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddPortalGroup]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddPortalGroup]
	@PortalGroupName			nvarchar(100),
	@PortalGroupDescription		nvarchar(2000),
	@CreatedByUserID			int
AS 
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}PortalGroups  
		( 
			PortalGroupName  , 
			PortalGroupDescription  , 
			CreatedByUserID , 
			CreatedOnDate , 
			LastModifiedByUserID , 
			LastModifiedOnDate  
		)  
		VALUES  
		( 
			@PortalGroupName , 
			@PortalGroupDescription , 
			@CreatedByUserID , 
			getdate() , 
			@CreatedByUserID , 
			getdate() 
		) 
		 
		SELECT SCOPE_IDENTITY()
	END
GO

/* Add DeletePortalGroup Procedure */
/***********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeletePortalGroup]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalGroup]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalGroup]
	@PortalGroupID	int
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}PortalGroups  
			WHERE PortalGroupID = @PortalGroupID
	END
GO

/* Add GetPortalGroups Procedure */
/*********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetPortalGroups]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetPortalGroups]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalGroups]

AS 
	SELECT * FROM {databaseOwner}{objectQualifier}PortalGroups 
GO

/* Add UpdatePortalGroup Procedure */
/***********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdatePortalGroup]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdatePortalGroup]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdatePortalGroup]
	@PortalGroupID				int,
	@PortalGroupName			nvarchar(100),
	@PortalGroupDescription		nvarchar(2000),
	@LastModifiedByUserID		int
AS 
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}PortalGroups 
			SET 
				PortalGroupName = @PortalGroupName,
				PortalGroupDescription = @PortalGroupDescription,
				LastModifiedByUserID = @LastModifiedByUserID,
				LastModifiedOnDate = getdate()
			WHERE PortalGroupID = @PortalGroupID
	END
GO

/* Add PortalGroupID Column To Portals Table */
/*********************************************/

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME='{objectQualifier}Portals' AND COLUMN_NAME='PortalGroupID')
	BEGIN
		-- Add new Column
		ALTER TABLE {databaseOwner}{objectQualifier}Portals
			ADD PortalGroupID int NULL
	END
GO

/* Update Portals View */
/***********************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_Portals]') AND OBJECTPROPERTY(id, N'IsView') = 1)
	DROP VIEW {databaseOwner}[{objectQualifier}vw_Portals]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_Portals]
AS
	SELECT DISTINCT 
		P.PortalID,
		P.PortalGroupID, 
		PL.PortalName, 
		CASE WHEN LEFT(LOWER(PL.LogoFile), 7) = 'fileid=' THEN
				(SELECT Folder + FileName FROM {databaseOwner}{objectQualifier}Files WHERE fileid = CAST((RIGHT(LOWER(PL.LogoFile), Len(PL.LogoFile) - 7)) AS int)) 
			ELSE 
				PL.LogoFile 
			END AS LogoFile, 
		PL.FooterText, 
		P.ExpiryDate, 
		P.UserRegistration, 
		P.BannerAdvertising, 
		P.AdministratorId, 
		P.Currency, 
		P.HostFee, 
		P.HostSpace, 
		P.PageQuota, 
		P.UserQuota, 
		P.AdministratorRoleId, 
		P.RegisteredRoleId, 
		PL.Description, 
		PL.KeyWords, 
		CASE WHEN LEFT(LOWER(PL.BackgroundFile), 7) = 'fileid=' THEN
				(SELECT Folder + FileName FROM {databaseOwner}{objectQualifier}Files WHERE fileid = CAST((RIGHT(LOWER(PL.BackgroundFile), Len(PL.BackgroundFile) - 7)) AS int)) 
			ELSE 
				PL.BackgroundFile 
			END AS BackgroundFile, 
		P.GUID, 
		P.PaymentProcessor, 
		P.ProcessorUserId, 
		P.ProcessorPassword, 
		P.SiteLogHistory, 
		U.Email, 
		P.DefaultLanguage, 
		P.TimezoneOffset, 
		PL.AdminTabId, 
		P.HomeDirectory, 
		PL.SplashTabId, 
		PL.HomeTabId, 
		PL.LoginTabId, 
		PL.RegisterTabId, 
		PL.UserTabId, 
		PL.SearchTabId,
		(SELECT  TOP (1) TabID
			FROM   {databaseOwner}{objectQualifier}Tabs
				WHERE      (PortalID IS NULL) AND (ParentId IS NULL))
			AS SuperTabId, 
		P.CreatedByUserID, 
		P.CreatedOnDate, 
		P.LastModifiedByUserID, 
		P.LastModifiedOnDate, 
		PL.CultureCode
	FROM {databaseOwner}{objectQualifier}Portals AS P 
		INNER JOIN {databaseOwner}{objectQualifier}PortalLocalization AS PL ON P.PortalID = PL.PortalID 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users AS U ON P.AdministratorId = U.UserID
GO

/* Update PortalsDefaultLanguage View */
/**************************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_PortalsDefaultLanguage]') AND OBJECTPROPERTY(id, N'IsView') = 1)
	DROP VIEW {databaseOwner}[{objectQualifier}vw_PortalsDefaultLanguage]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_PortalsDefaultLanguage]
AS
	SELECT DISTINCT 
        P.PortalID, 
		P.PortalGroupID, 
		PL.PortalName, 
		PL.LogoFile, 
		PL.FooterText, 
		P.ExpiryDate, 
		P.UserRegistration, 
		P.BannerAdvertising, 
		P.AdministratorId, 
		P.Currency, 
		P.HostFee, 
        P.HostSpace, 
		P.PageQuota, 
		P.UserQuota, 
		P.AdministratorRoleId, 
		P.RegisteredRoleId, 
		PL.Description, 
		PL.KeyWords, 
		PL.BackgroundFile, 
		P.GUID, 
		P.PaymentProcessor,
        P.ProcessorUserId, 
		P.ProcessorPassword, 
		P.SiteLogHistory, 
		U.Email, 
		P.DefaultLanguage, 
		P.TimezoneOffset, 
		PL.AdminTabId, 
		P.HomeDirectory, 
		PL.SplashTabId, 
        PL.HomeTabId, 
		PL.LoginTabId, 
		PL.RegisterTabId, 
		PL.UserTabId, 
		PL.SearchTabId,
        (SELECT     TOP (1) TabID
			FROM          {databaseOwner}{objectQualifier}Tabs
				WHERE      (PortalID IS NULL) AND (ParentId IS NULL))
			AS SuperTabId, 
		P.CreatedByUserID, 
		P.CreatedOnDate, 
		P.LastModifiedByUserID, 
		P.LastModifiedOnDate, 
        PL.CultureCode
	FROM	{databaseOwner}{objectQualifier}Portals AS P 
		INNER JOIN (SELECT  
						PortalID, 
						PortalName, 
						CASE WHEN LEFT(LOWER(LogoFile), 7) = 'fileid=' THEN
								(SELECT Folder + FileName
									FROM {databaseOwner}{objectQualifier}Files
									WHERE fileid = CAST((RIGHT(LOWER(LogoFile), LEN(LogoFile) - 7)) AS INT)) 
							ELSE 
								LogoFile
							END AS LogoFile,
						FooterText, 
						Description, 
						KeyWords, 
                        CASE WHEN LEFT(LOWER(BackgroundFile), 7) = 'fileid=' THEN
								(SELECT Folder + FileName
									FROM {databaseOwner}{objectQualifier}Files
									WHERE fileid = CAST((RIGHT(LOWER(BackgroundFile), LEN(BackgroundFile) - 7)) AS INT)) 
							ELSE 
								BackgroundFile 
							END AS BackgroundFile, 
						AdminTabId, 
						SplashTabId, 
						HomeTabId, 
						LoginTabId, 
						RegisterTabId, 
						UserTabId, 
						SearchTabId, 
						CultureCode
				FROM    {databaseOwner}{objectQualifier}PortalLocalization) 
			AS PL ON P.PortalID = PL.PortalID AND PL.CultureCode = P.DefaultLanguage 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users AS U ON P.AdministratorId = U.UserID
GO

/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/