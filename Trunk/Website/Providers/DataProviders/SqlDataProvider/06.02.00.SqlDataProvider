/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

/* Drop Level Column From Tabs Table */
/*************************************/

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME='{objectQualifier}Tabs' AND COLUMN_NAME='Level')
	BEGIN
		ALTER TABLE {databaseOwner}{objectQualifier}Tabs
			DROP CONSTRAINT DF_{objectQualifier}Tabs_Level
		-- Add new Column
		ALTER TABLE {databaseOwner}{objectQualifier}Tabs
			DROP COLUMN Level
	END
GO

/* Drop TabPath Column From Tabs Table */
/***************************************/

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME='{objectQualifier}Tabs' AND COLUMN_NAME='TabPath')
	BEGIN
		-- Add new Column
		ALTER TABLE {databaseOwner}{objectQualifier}Tabs
			DROP COLUMN  TabPath
	END
GO

/* Add RemoveStringCharacters Function */
/***************************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}RemoveStringCharacters]') and OBJECTPROPERTY(id, N'IsScalarFunction') = 1)
	DROP FUNCTION {databaseOwner}[{objectQualifier}RemoveStringCharacters]
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}RemoveStringCharacters]
(
		@string nvarchar(max), 
		@remove nvarchar(100)
)
RETURNS nvarchar(max)
AS
BEGIN
    WHILE @string LIKE '%[' + @remove + ']%'
    BEGIN
        SET @string = REPLACE(@string,SUBSTRING(@string,PATINDEX('%[' + @remove + ']%',@string),1),'')
    END

    RETURN @string
END

GO

/* Update Tabs View to use CTEs */
/********************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_Tabs]') and OBJECTPROPERTY(id, N'IsView') = 1)
	DROP VIEW {databaseOwner}[{objectQualifier}vw_Tabs]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_Tabs]
AS
	WITH RecursiveTabs (TabID, Level, TabPath)
	AS	
	(
		SELECT 
			TabID,
			0 AS Level,
			CAST('//' + {databaseOwner}{objectQualifier}RemoveStringCharacters(TabName, '&? ') AS NVARCHAR(255)) AS TabPath
		FROM {objectQualifier}Tabs
		WHERE ParentId IS Null
	  
		UNION ALL
	  
		SELECT 
			T.TabID,
			Level + 1,
			CAST(TabPath + '//' + {databaseOwner}{objectQualifier}RemoveStringCharacters(TabName, '&? ') AS NVARCHAR(255))
		FROM {objectQualifier}Tabs T
		INNER JOIN RecursiveTabs R ON T.ParentId = R.TabID
	)

	SELECT     
		T.TabID, 
		T.TabOrder, 
		T.PortalID, 
		T.TabName, 
		T.ParentId, 
		R.[Level], 
		R.TabPath, 
		T.UniqueId, 
		T.VersionGuid, 
		T.DefaultLanguageGuid, 
		T.LocalizedVersionGuid, 
		T.IsVisible, 
		CASE WHEN LEFT(LOWER(T .IconFile), 7) = 'fileid=' THEN
			(SELECT Folder + FileName
				FROM {objectQualifier}Files
				WHERE fileid = CAST((RIGHT(LOWER(T.IconFile), Len(T.IconFile) - 7)) AS int)
			) ELSE T.IconFile 
			END AS IconFile, 
		CASE WHEN LEFT(LOWER(T .IconFileLarge), 7) = 'fileid=' THEN
			(SELECT Folder + FileName
				FROM  {objectQualifier}Files
				WHERE fileid = CAST((RIGHT(LOWER(T.IconFileLarge), Len(T.IconFileLarge) - 7)) AS int)
			) ELSE T.IconFileLarge
			END AS IconFileLarge, 
		T.DisableLink, 
		T.Title, 
		T.Description, 
		T.KeyWords, 
		T.IsDeleted, 
		T.SkinSrc, 
		T.ContainerSrc, 
		T.StartDate, 
		T.EndDate, 
		T.Url, 
		CASE WHEN EXISTS (SELECT 1 FROM {objectQualifier}Tabs T2 WHERE T2.ParentId = T.TabId) THEN 'true' ELSE 'false' END AS HasChildren, 
		T.RefreshInterval, 
		T.PageHeadText, 
		T.IsSecure, 
		T.PermanentRedirect, 
		T.SiteMapPriority, 
		CI.ContentItemID, 
		CI.[Content], 
		CI.ContentTypeID, 
		CI.ModuleID, 
		CI.ContentKey, 
		CI.Indexed, 
		T.CultureCode, 
		T.CreatedByUserID, 
		T.CreatedOnDate, 
		T.LastModifiedByUserID, 
		T.LastModifiedOnDate
	FROM  RecursiveTabs R 
		INNER JOIN {objectQualifier}Tabs AS T ON R.TabID = T.TabID
		LEFT OUTER JOIN {objectQualifier}ContentItems AS CI ON T.ContentItemID = CI.ContentItemID

GO

/* Update AddTab Procedure */
/***************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddTab]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddTab]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTab] 
    @ContentItemID			int,
    @PortalID				int,
    @TabOrder				int,
    @UniqueId				uniqueidentifier,
    @VersionGuid			uniqueidentifier,
    @DefaultLanguageGuid	uniqueidentifier,
    @LocalizedVersionGuid	uniqueidentifier,
    @TabName				nvarchar(50),
    @IsVisible				bit,
    @DisableLink			bit,
    @ParentId				int,
    @IconFile				nvarchar(100),
    @IconFileLarge			nvarchar(100),
    @Title					nvarchar(200),
    @Description			nvarchar(500),
    @KeyWords				nvarchar(500),
    @Url					nvarchar(255),
    @SkinSrc				nvarchar(200),
    @ContainerSrc			nvarchar(200),
    @StartDate				datetime,
    @EndDate				datetime,
    @RefreshInterval		int,
    @PageHeadText			nvarchar(500),
    @IsSecure				bit,
    @PermanentRedirect		bit,
    @SiteMapPriority		float,
    @CreatedByUserID		int,
    @CultureCode			nvarchar(50)

AS

    INSERT INTO {objectQualifier}Tabs (
        ContentItemID,
        PortalID,
        TabOrder,
        UniqueId,
        VersionGuid,
        DefaultLanguageGuid,
        LocalizedVersionGuid,
        TabName,
        IsVisible,
        DisableLink,
        ParentId,
        IconFile,
        IconFileLarge,
        Title,
        Description,
        KeyWords,
        IsDeleted,
        Url,
        SkinSrc,
        ContainerSrc,
        StartDate,
        EndDate,
        RefreshInterval,
        PageHeadText,
        IsSecure,
        PermanentRedirect,
        SiteMapPriority,
        CreatedByUserID,
        CreatedOnDate,
        LastModifiedByUserID,
        LastModifiedOnDate,
        CultureCode
    )
    VALUES (
        @ContentItemID,
        @PortalID,
        @TabOrder,
        @UniqueId,
        @VersionGuid,
        @DefaultLanguageGuid,
        @LocalizedVersionGuid,
        @TabName,
        @IsVisible,
        @DisableLink,
        @ParentId,
        @IconFile,
        @IconFileLarge,
        @Title,
        @Description,
        @KeyWords,
        0,
        @Url,
        @SkinSrc,
        @ContainerSrc,
        @StartDate,
        @EndDate,
        @RefreshInterval,
        @PageHeadText,
        @IsSecure,
        @PermanentRedirect,
        @SiteMapPriority,
        @CreatedByUserID,
        getdate(),
        @CreatedByUserID,
        getdate(),
        @CultureCode
    )

    SELECT SCOPE_IDENTITY()

GO

/* Update GetAllTabs Procedure */
/*******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetAllTabs]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetAllTabs]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAllTabs] 
AS
	SELECT *
		FROM {objectQualifier}vw_Tabs
		ORDER BY Level, ParentID, TabOrder
GO

/* Update GetTabPaths Procedure */
/*******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetTabPaths]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetTabPaths]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabPaths] 
	@PortalID		int,
	@CultureCode	nvarchar(10)
AS
	SELECT
		TabID, 
		PortalID, 
		TabPath
	FROM {objectQualifier}vw_Tabs
	WHERE (PortalID = @PortalID AND (CultureCode = @CultureCode OR CultureCode Is Null))
		OR @PortalID Is NULL
GO

/* Update UpdateTab Procedure */
/*******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateTab]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateTab]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTab] 
    @TabId					int,
    @ContentItemID			int,
    @PortalId				int,
    @VersionGuid			uniqueidentifier,
    @DefaultLanguageGuid	uniqueidentifier,
    @LocalizedVersionGuid	uniqueidentifier,
    @TabName				nvarchar(50),
    @IsVisible				bit,
    @DisableLink			bit,
    @ParentId				int,
    @IconFile				nvarchar(100),
    @IconFileLarge			nvarchar(100),
    @Title					nvarchar(200),
    @Description			nvarchar(500),
    @KeyWords				nvarchar(500),
    @IsDeleted				bit,
    @Url					nvarchar(255),
    @SkinSrc				nvarchar(200),
    @ContainerSrc			nvarchar(200),
    @StartDate				datetime,
    @EndDate				datetime,
    @RefreshInterval		int,
    @PageHeadText			nvarchar(500),
    @IsSecure				bit,
    @PermanentRedirect		bit,
    @SiteMapPriority		float,
    @LastModifiedByUserID	int,
    @CultureCode			nvarchar(50)

AS

    UPDATE {objectQualifier}Tabs
        SET
            ContentItemID			= @ContentItemID,
            PortalId				= @PortalId,
            VersionGuid				= @VersionGuid,
            DefaultLanguageGuid		= @DefaultLanguageGuid,
            LocalizedVersionGuid	= @LocalizedVersionGuid,
            TabName					= @TabName,
            IsVisible				= @IsVisible,
            DisableLink				= @DisableLink,
            ParentId				= @ParentId,
            IconFile				= @IconFile,
            IconFileLarge			= @IconFileLarge,
            Title					= @Title,
            Description				= @Description,
            KeyWords				= @KeyWords,
            IsDeleted				= @IsDeleted,
            Url						= @Url,
            SkinSrc					= @SkinSrc,
            ContainerSrc			= @ContainerSrc,
            StartDate				= @StartDate,
            EndDate					= @EndDate,
            RefreshInterval			= @RefreshInterval,
            PageHeadText			= @PageHeadText,
            IsSecure				= @IsSecure,
            PermanentRedirect		= @PermanentRedirect,
            SiteMapPriority			= @SiteMapPriority,
            LastModifiedByUserID	= @LastModifiedByUserID,
            LastModifiedOnDate		= getdate(),
            CultureCode				= @CultureCode
    WHERE  TabId = @TabId

GO

/* Update UpdateTabOrder Procedure */
/***********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateTabOrder]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateTabOrder]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTabOrder] 
	@TabId					int,
	@TabOrder				int,
	@ParentId				int,
	@LastModifiedByUserID	int
AS

	UPDATE {objectQualifier}Tabs
		SET
			TabOrder				= @TabOrder,
			ParentId				= @ParentId,
			LastModifiedByUserID	= @LastModifiedByUserID,
			LastModifiedOnDate		= getdate()
	WHERE  TabId = @TabId
GO

/* Add AddTabBefore Procedure */
/******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddTabBefore]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddTabBefore]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTabBefore] 
	@BeforeTabID			int,
	@ContentItemID			int,
    @PortalID				int,
    @UniqueId				uniqueidentifier,
    @VersionGuid			uniqueidentifier,
    @DefaultLanguageGuid	uniqueidentifier,
    @LocalizedVersionGuid	uniqueidentifier,
    @TabName				nvarchar(50),
    @IsVisible				bit,
    @DisableLink			bit,
    @ParentId				int,
    @IconFile				nvarchar(100),
    @IconFileLarge			nvarchar(100),
    @Title					nvarchar(200),
    @Description			nvarchar(500),
    @KeyWords				nvarchar(500),
    @Url					nvarchar(255),
    @SkinSrc				nvarchar(200),
    @ContainerSrc			nvarchar(200),
    @StartDate				datetime,
    @EndDate				datetime,
    @RefreshInterval		int,
    @PageHeadText			nvarchar(500),
    @IsSecure				bit,
    @PermanentRedirect		bit,
    @SiteMapPriority		float,
    @CreatedByUserID		int,
    @CultureCode			nvarchar(50)

AS

	BEGIN
		DECLARE @TabId int
		DECLARE @TabOrder INT 
		SELECT @TabOrder = TabOrder FROM {objectQualifier}Tabs WHERE TabID = @BeforeTabID
		
		-- Update TabOrders for all Tabs higher than @TabOrder
		UPDATE {objectQualifier}Tabs
			SET TabOrder = TabOrder + 2
			WHERE (ParentId = @ParentId OR (ParentId IS NULL AND @ParentID IS NULL))
				AND TabOrder >= @TabOrder
		
		-- Create Tab
		EXECUTE @TabId = {objectQualifier}AddTab 
							@ContentItemID,
							@PortalID,
							@TabOrder,
							@UniqueId,
							@VersionGuid,
							@DefaultLanguageGuid,
							@LocalizedVersionGuid,
							@TabName,
							@IsVisible,
							@DisableLink,
							@ParentId,
							@IconFile,
							@IconFileLarge,
							@Title,
							@Description,
							@KeyWords,
							@Url,
							@SkinSrc,
							@ContainerSrc,
							@StartDate,
							@EndDate,
							@RefreshInterval,
							@PageHeadText,
							@IsSecure,
							@PermanentRedirect,
							@SiteMapPriority,
							@CreatedByUserID,
							@CultureCode;
		
		-- Update Content Item
		UPDATE {objectQualifier}ContentItems
			SET TabID = @TabId
			WHERE ContentItemID = @ContentItemID

		SELECT @TabId
	END
GO

/* Add AddTabAfter Procedure */
/*****************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddTabAfter]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddTabAfter]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTabAfter] 
	@AfterTabID				int,
	@ContentItemID			int,
    @PortalID				int,
    @UniqueId				uniqueidentifier,
    @VersionGuid			uniqueidentifier,
    @DefaultLanguageGuid	uniqueidentifier,
    @LocalizedVersionGuid	uniqueidentifier,
    @TabName				nvarchar(50),
    @IsVisible				bit,
    @DisableLink			bit,
    @ParentId				int,
    @IconFile				nvarchar(100),
    @IconFileLarge			nvarchar(100),
    @Title					nvarchar(200),
    @Description			nvarchar(500),
    @KeyWords				nvarchar(500),
    @Url					nvarchar(255),
    @SkinSrc				nvarchar(200),
    @ContainerSrc			nvarchar(200),
    @StartDate				datetime,
    @EndDate				datetime,
    @RefreshInterval		int,
    @PageHeadText			nvarchar(500),
    @IsSecure				bit,
    @PermanentRedirect		bit,
    @SiteMapPriority		float,
    @CreatedByUserID		int,
    @CultureCode			nvarchar(50)

AS

	BEGIN
		DECLARE @TabId int
		DECLARE @TabOrder INT 
		SET @TabOrder = (SELECT TabOrder FROM {objectQualifier}Tabs WHERE TabID = @AfterTabID)
		
		-- Update TabOrders for all Tabs higher than @TabOrder
		UPDATE {objectQualifier}Tabs
			SET TabOrder = TabOrder + 2
			WHERE (ParentId = @ParentId OR (ParentId IS NULL AND @ParentID IS NULL))
				AND TabOrder > @TabOrder
		
		-- Create Tab
		SET @TabOrder = @TabOrder + 2
		EXECUTE @TabId = {objectQualifier}AddTab 
							@ContentItemID,
							@PortalID,
							@TabOrder,
							@UniqueId,
							@VersionGuid,
							@DefaultLanguageGuid,
							@LocalizedVersionGuid,
							@TabName,
							@IsVisible,
							@DisableLink,
							@ParentId,
							@IconFile,
							@IconFileLarge,
							@Title,
							@Description,
							@KeyWords,
							@Url,
							@SkinSrc,
							@ContainerSrc,
							@StartDate,
							@EndDate,
							@RefreshInterval,
							@PageHeadText,
							@IsSecure,
							@PermanentRedirect,
							@SiteMapPriority,
							@CreatedByUserID,
							@CultureCode;
		
		-- Update Content Item
		UPDATE {objectQualifier}ContentItems
			SET TabID = @TabId
			WHERE ContentItemID = @ContentItemID

		SELECT @TabId
	END
GO

/* Add AddTabToEnd Procedure */
/*****************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddTabToEnd]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddTabToEnd]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTabToEnd] 
	@ContentItemID			int,
    @PortalID				int,
    @UniqueId				uniqueidentifier,
    @VersionGuid			uniqueidentifier,
    @DefaultLanguageGuid	uniqueidentifier,
    @LocalizedVersionGuid	uniqueidentifier,
    @TabName				nvarchar(50),
    @IsVisible				bit,
    @DisableLink			bit,
    @ParentId				int,
    @IconFile				nvarchar(100),
    @IconFileLarge			nvarchar(100),
    @Title					nvarchar(200),
    @Description			nvarchar(500),
    @KeyWords				nvarchar(500),
    @Url					nvarchar(255),
    @SkinSrc				nvarchar(200),
    @ContainerSrc			nvarchar(200),
    @StartDate				datetime,
    @EndDate				datetime,
    @RefreshInterval		int,
    @PageHeadText			nvarchar(500),
    @IsSecure				bit,
    @PermanentRedirect		bit,
    @SiteMapPriority		float,
    @CreatedByUserID		int,
    @CultureCode			nvarchar(50)

AS

	BEGIN
		DECLARE @TabId int
		DECLARE @TabOrder int 
		SET @TabOrder = (SELECT MAX(TabOrder) FROM {objectQualifier}Tabs WHERE (ParentId = @ParentId OR (ParentId IS NULL AND @ParentID IS NULL)))
		IF @TabOrder IS NULL
			SET @TabOrder = 1
		ELSE
			SET @TabOrder = @TabOrder + 2

		-- Create Tab
		EXECUTE @TabId = {objectQualifier}AddTab 
							@ContentItemID,
							@PortalID,
							@TabOrder,
							@UniqueId,
							@VersionGuid,
							@DefaultLanguageGuid,
							@LocalizedVersionGuid,
							@TabName,
							@IsVisible,
							@DisableLink,
							@ParentId,
							@IconFile,
							@IconFileLarge,
							@Title,
							@Description,
							@KeyWords,
							@Url,
							@SkinSrc,
							@ContainerSrc,
							@StartDate,
							@EndDate,
							@RefreshInterval,
							@PageHeadText,
							@IsSecure,
							@PermanentRedirect,
							@SiteMapPriority,
							@CreatedByUserID,
							@CultureCode;
		
		-- Update Content Item
		UPDATE {objectQualifier}ContentItems
			SET TabID = @TabId
			WHERE ContentItemID = @ContentItemID

		SELECT @TabId
	END
GO

/* Update DeleteTab Procedure */
/******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteTab]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteTab]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteTab] 
	@TabId int
AS
	BEGIN
		DECLARE @TabOrder INT
		SET @TabOrder = (SELECT TabOrder FROM {objectQualifier}Tabs WHERE TabID = @TabId)

		DECLARE @ParentID INT
		SET @ParentID = (SELECT ParentID FROM {objectQualifier}Tabs WHERE TabID = @TabId)

		DECLARE @ContentItemID INT
		SET @ContentItemID = (SELECT ContentItemID FROM {objectQualifier}Tabs WHERE TabID = @TabId)

		-- Delete Tab --
		DELETE FROM {objectQualifier}Tabs
			WHERE  TabId = @TabId

		-- Update TabOrder of remaining Tabs --
		UPDATE {objectQualifier}Tabs
			SET TabOrder = TabOrder - 2
			WHERE (ParentId = @ParentId OR (ParentId IS NULL AND @ParentID IS NULL))
				AND TabOrder > @TabOrder
			
		-- Delete Content Item --
		DELETE {objectQualifier}ContentItems
			WHERE ContentItemID = @ContentItemID
	END

GO

/* Add MoveTabAfter Procedure */
/******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}MoveTabAfter]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}MoveTabAfter]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}MoveTabAfter] 
	@TabId					int,
	@AfterTabId				int,
	@LastModifiedByUserID	int
AS
	BEGIN
		DECLARE @OldParentId int
		DECLARE @NewParentId int
		
		SET @OldParentId = (SELECT ParentId FROM {objectQualifier}Tabs WHERE TabID = @TabId)
		SET @NewParentId = (SELECT ParentId FROM {objectQualifier}Tabs WHERE TabID = @AfterTabId)
		
		DECLARE @TabOrder int
		SET @TabOrder = (SELECT TabOrder FROM {objectQualifier}Tabs WHERE TabID = @TabId)
		
		IF (@OldParentId <> @NewParentId OR NOT (@OldParentId IS NULL AND @NewParentId IS NULL))
			-- Parent has changed
			BEGIN
				-- update TabOrder of Tabs with same original Parent
				UPDATE {objectQualifier}Tabs
					SET TabOrder = TabOrder - 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder

				-- Get TabOrder of AfterTab
				SET @TabOrder = (SELECT TabOrder FROM {objectQualifier}Tabs WHERE TabID = @AfterTabId)
						
				-- update TabOrder of Tabs with same new Parent
				UPDATE {objectQualifier}Tabs
					SET TabOrder = TabOrder + 2
					WHERE (ParentId = @NewParentId OR (ParentId IS NULL AND @NewParentId IS NULL)) 
						AND TabOrder > @TabOrder

				-- Update Tab with new TabOrder
				UPDATE {objectQualifier}Tabs
					SET 
						ParentId				= @NewParentId,
						TabOrder				= @TabOrder + 2,
						LastModifiedByUserID	= @LastModifiedByUserID,
						LastModifiedOnDate		= getdate()					
					WHERE TabID = @TabId
				
			END
		ELSE
			-- Parent has not changed
			BEGIN
				-- Remove Tab from TabOrder
				UPDATE {objectQualifier}Tabs
					SET TabOrder = -1
					WHERE TabID = @TabId
					
				-- Reorder
				UPDATE {objectQualifier}Tabs
					SET TabOrder = TabOrder - 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder
						AND TabId <> @TabId
						
				-- Get TabOrder of AfterTab
				SET @TabOrder = (SELECT TabOrder FROM {objectQualifier}Tabs WHERE TabID = @AfterTabId)
										
				-- Reorder					
				UPDATE {objectQualifier}Tabs
					SET TabOrder = TabOrder + 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder

				-- Update Tab with new TabOrder
				UPDATE {objectQualifier}Tabs
					SET 
						TabOrder				= @TabOrder + 2,
						LastModifiedByUserID	= @LastModifiedByUserID,
						LastModifiedOnDate		= getdate()					
					WHERE TabID = @TabId
			END			
	END

GO

/* Add MoveTabBefore Procedure */
/*******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}MoveTabBefore]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}MoveTabBefore]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}MoveTabBefore] 
	@TabId					int,
	@BeforeTabId			int,
	@LastModifiedByUserID	int
AS
	BEGIN
		DECLARE @OldParentId int
		DECLARE @NewParentId int
		
		SET @OldParentId = (SELECT ParentId FROM {objectQualifier}Tabs WHERE TabID = @TabId)
		SET @NewParentId = (SELECT ParentId FROM {objectQualifier}Tabs WHERE TabID = @BeforeTabId)
		
		DECLARE @TabOrder int
		SET @TabOrder = (SELECT TabOrder FROM {objectQualifier}Tabs WHERE TabID = @TabId)
		
		IF (@OldParentId <> @NewParentId OR NOT (@OldParentId IS NULL AND @NewParentId IS NULL))
			-- Parent has changed
			BEGIN
				-- update TabOrder of Tabs with same original Parent
				UPDATE {objectQualifier}Tabs
					SET TabOrder = TabOrder - 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder

				-- Get TabOrder of AfterTab
				SET @TabOrder = (SELECT TabOrder FROM {objectQualifier}Tabs WHERE TabID = @BeforeTabId)
						
				-- update TabOrder of Tabs with same new Parent
				UPDATE {objectQualifier}Tabs
					SET TabOrder = TabOrder + 2
					WHERE (ParentId = @NewParentId OR (ParentId IS NULL AND @NewParentId IS NULL)) 
						AND TabOrder >= @TabOrder

				-- Update Tab with new TabOrder
				UPDATE {objectQualifier}Tabs
					SET 
						ParentId				= @NewParentId,
						TabOrder				= @TabOrder,
						LastModifiedByUserID	= @LastModifiedByUserID,
						LastModifiedOnDate		= getdate()					
					WHERE TabID = @TabId
				
			END
		ELSE
			-- Parent has not changed
			BEGIN
				-- Remove Tab from TabOrder
				UPDATE {objectQualifier}Tabs
					SET TabOrder = -1
					WHERE TabID = @TabId
					
				-- Reorder
				UPDATE {objectQualifier}Tabs
					SET TabOrder = TabOrder - 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder
						AND TabId <> @TabId
						
				-- Get TabOrder of BeforeTab
				SET @TabOrder = (SELECT TabOrder FROM {objectQualifier}Tabs WHERE TabID = @BeforeTabId)
										
				-- Reorder					
				UPDATE {objectQualifier}Tabs
					SET TabOrder = TabOrder + 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder >= @TabOrder

				-- Update Tab with new TabOrder
				UPDATE {objectQualifier}Tabs
					SET 
						TabOrder				= @TabOrder,
						LastModifiedByUserID	= @LastModifiedByUserID,
						LastModifiedOnDate		= getdate()					
					WHERE TabID = @TabId
			END			
	END

GO

/* Add MoveTabToParent Procedure */
/*********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}MoveTabToParent]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}MoveTabToParent]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}MoveTabToParent] 
	@TabId					int,
	@NewParentId			int,
	@LastModifiedByUserID	int
AS
	BEGIN
		DECLARE @OldParentId int
		SET @OldParentId = (SELECT ParentId FROM {objectQualifier}Tabs WHERE TabID = @TabId)
		
		DECLARE @TabOrder int
		SET @TabOrder = (SELECT TabOrder FROM {objectQualifier}Tabs WHERE TabID = @TabId)
		
		-- Get New TabOrder
		DECLARE @NewTabOrder int
		SET @NewTabOrder = (SELECT MAX(TabOrder) FROM {objectQualifier}Tabs WHERE (ParentId = @NewParentId OR (ParentId IS NULL AND @NewParentId IS NULL)))
		IF @NewTabOrder IS NULL 
			SET @NewTabOrder = 1
		ELSE
			SET @NewTabOrder = @NewTabOrder + 2			
				
		BEGIN
			-- update TabOrder of Tabs with same original Parent
			UPDATE {objectQualifier}Tabs
				SET TabOrder = TabOrder - 2
				WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
					AND TabOrder > @TabOrder

			-- Update Tab with new TabOrder
			UPDATE {objectQualifier}Tabs
				SET 
					ParentId				= @NewParentId,
					TabOrder				= @NewTabOrder,
					LastModifiedByUserID	= @LastModifiedByUserID,
					LastModifiedOnDate		= getdate()					
				WHERE TabID = @TabId
		END
	END
GO

/* Update UpdateTab Procedure */
/******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateTab]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateTab]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTab] 
    @TabId					int,
    @ContentItemID			int,
    @PortalId				int,
    @VersionGuid			uniqueidentifier,
    @DefaultLanguageGuid	uniqueidentifier,
    @LocalizedVersionGuid	uniqueidentifier,
    @TabName				nvarchar(50),
    @IsVisible				bit,
    @DisableLink			bit,
    @ParentId				int,
    @IconFile				nvarchar(100),
    @IconFileLarge			nvarchar(100),
    @Title					nvarchar(200),
    @Description			nvarchar(500),
    @KeyWords				nvarchar(500),
    @IsDeleted				bit,
    @Url					nvarchar(255),
    @SkinSrc				nvarchar(200),
    @ContainerSrc			nvarchar(200),
    @StartDate				datetime,
    @EndDate				datetime,
    @RefreshInterval		int,
    @PageHeadText			nvarchar(500),
    @IsSecure				bit,
    @PermanentRedirect		bit,
    @SiteMapPriority		float,
    @LastModifiedByUserID	int,
    @CultureCode			nvarchar(50)

AS
	BEGIN
		DECLARE @OldParentId int
		SET @OldParentId = (SELECT ParentId FROM {objectQualifier}Tabs WHERE TabID = @TabId)

		DECLARE @TabOrder int
		SET @TabOrder = (SELECT TabOrder FROM {objectQualifier}Tabs WHERE TabID = @TabId)
				
		-- Get New TabOrder
		DECLARE @NewTabOrder int
		SET @NewTabOrder = (SELECT MAX(TabOrder) FROM {objectQualifier}Tabs WHERE (ParentId = @ParentId OR (ParentId IS NULL AND @ParentId IS NULL)))
		IF @NewTabOrder IS NULL 
			SET @NewTabOrder = 1
		ELSE
			SET @NewTabOrder = @NewTabOrder + 2
		
		UPDATE {objectQualifier}Tabs
			SET
				ContentItemID			= @ContentItemID,
				PortalId				= @PortalId,
				VersionGuid				= @VersionGuid,
				DefaultLanguageGuid		= @DefaultLanguageGuid,
				LocalizedVersionGuid	= @LocalizedVersionGuid,
				TabName					= @TabName,
				IsVisible				= @IsVisible,
				DisableLink				= @DisableLink,
				ParentId				= @ParentId,
				IconFile				= @IconFile,
				IconFileLarge			= @IconFileLarge,
				Title					= @Title,
				Description				= @Description,
				KeyWords				= @KeyWords,
				IsDeleted				= @IsDeleted,
				Url						= @Url,
				SkinSrc					= @SkinSrc,
				ContainerSrc			= @ContainerSrc,
				StartDate				= @StartDate,
				EndDate					= @EndDate,
				RefreshInterval			= @RefreshInterval,
				PageHeadText			= @PageHeadText,
				IsSecure				= @IsSecure,
				PermanentRedirect		= @PermanentRedirect,
				SiteMapPriority			= @SiteMapPriority,
				LastModifiedByUserID	= @LastModifiedByUserID,
				LastModifiedOnDate		= getdate(),
				CultureCode				= @CultureCode
		WHERE  TabId = @TabId
		
		IF (@OldParentId <> @ParentId OR NOT (@OldParentId IS NULL AND @ParentId IS NULL))
			BEGIN
				-- update TabOrder of Tabs with same original Parent
				UPDATE {objectQualifier}Tabs
					SET TabOrder = TabOrder - 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder

				-- Update Tab with new TabOrder
				UPDATE {objectQualifier}Tabs
					SET 
						TabOrder = @NewTabOrder
					WHERE TabID = @TabId
			END
    END
GO

/* Update LocalizeTab Procedure */
/********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}LocalizeTab]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}LocalizeTab]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}LocalizeTab] 
	@TabId					int,
	@CultureCode			nvarchar(10),
	@LastModifiedByUserID	int
AS
	BEGIN
		UPDATE {objectQualifier}Tabs
			SET 
				CultureCode				= @CultureCode,
				LastModifiedByUserID	= @LastModifiedByUserID,
				LastModifiedOnDate		= getdate()					
			WHERE TabID = @TabId
			
		UPDATE {objectQualifier}TabModules
			SET 
				CultureCode				= @CultureCode,
				LastModifiedByUserID	= @LastModifiedByUserID,
				LastModifiedOnDate		= getdate()					
			WHERE TabID = @TabId
	END
GO

--Schema creation for Social Relationship
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}RelationshipTypes]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}RelationshipTypes]
		(
			[RelationshipTypeID] [int] IDENTITY(1,1) NOT NULL,
			[Direction] [int] NOT NULL,
			[Name] [nvarchar](50) NOT NULL,
			[Description] [nvarchar](500) NULL,
			[CreatedByUserID] [int] NOT NULL,
			[CreatedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}RelationshipTypes_CreatedOnDate]  DEFAULT (getdate()) NOT NULL ,
			[LastModifiedByUserID] [int] NOT NULL,
			[LastModifiedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}RelationshipTypes_LastModifiedOnDate]  DEFAULT (getdate()) NOT NULL,
			CONSTRAINT [PK_{objectQualifier}RelationshipTypes] PRIMARY KEY CLUSTERED ( [RelationshipTypeID] ASC )
		)		
	END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Relationships]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}Relationships]
		(
			[RelationshipID] [int] IDENTITY(1,1) NOT NULL,
			[RelationshipTypeID] [int] NOT NULL,
			[Name] [nvarchar](50) NOT NULL,
			[Description] [nvarchar](500) NULL,			
			[PortalID] [int] NULL,
			[UserID] [int] NULL,
			[DefaultResponse] [int] NOT NULL,
			[CreatedByUserID] [int] NOT NULL,
			[CreatedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}Relationships_CreatedOnDate]  DEFAULT (getdate()) NOT NULL ,
			[LastModifiedByUserID] [int] NOT NULL,
			[LastModifiedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}Relationships_LastModifiedOnDate]  DEFAULT (getdate()) NOT NULL,
			CONSTRAINT [PK_{objectQualifier}Relationships] PRIMARY KEY CLUSTERED ( [RelationshipID] ASC )
		)		

		CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Relationships_UserID] ON {databaseOwner}[{objectQualifier}Relationships] ([UserID] ASC)		
	
		ALTER TABLE {databaseOwner}[{objectQualifier}Relationships]  
			ADD CONSTRAINT [FK_{objectQualifier}Relationships_{objectQualifier}Portals] FOREIGN KEY([PortalID]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID]) ON DELETE CASCADE		
		ALTER TABLE {databaseOwner}[{objectQualifier}Relationships]  
			ADD CONSTRAINT [FK_{objectQualifier}Relationships_{objectQualifier}Users] FOREIGN KEY([UserID]) REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) ON DELETE CASCADE			
		ALTER TABLE {databaseOwner}[{objectQualifier}Relationships]  
			ADD CONSTRAINT [FK_{objectQualifier}Relationships_{objectQualifier}RelationshipTypes] FOREIGN KEY([RelationshipTypeID]) REFERENCES {databaseOwner}[{objectQualifier}RelationshipTypes] ([RelationshipTypeID]) ON DELETE CASCADE			
	END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UserRelationships]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}UserRelationships]
		(
			[UserRelationshipID] [int] IDENTITY(1,1) NOT NULL,
			[UserID] [int] NOT NULL,
			[RelatedUserID] [int] NOT NULL,
			[RelationshipID] [int] NOT NULL,
			[Status] [int] NOT NULL,
			[CreatedByUserID] [int] NOT NULL,
			[CreatedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}UserRelationships_CreatedOnDate]  DEFAULT (getdate()) NOT NULL ,
			[LastModifiedByUserID] [int] NOT NULL,
			[LastModifiedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}UserRelationships_LastModifiedOnDate]  DEFAULT (getdate()) NOT NULL,
			CONSTRAINT [PK_{objectQualifier}UserRelationships] PRIMARY KEY CLUSTERED ( [UserRelationshipID] ASC )
		)		

		CREATE UNIQUE NONCLUSTERED INDEX [IX_{objectQualifier}UserRelationships_UserID_RelatedUserID_RelationshipID] ON {databaseOwner}[{objectQualifier}UserRelationships] ([UserID] ASC, [RelatedUserID] ASC, [RelationshipID] ASC)
		CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UserRelationships_UserID] ON {databaseOwner}[{objectQualifier}UserRelationships] ([UserID] ASC)
		CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UserRelationships_RelatedUserID] ON {databaseOwner}[{objectQualifier}UserRelationships] ([RelatedUserID] ASC)
		
		ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationships]  
			ADD CONSTRAINT [FK_{objectQualifier}UserRelationships_{objectQualifier}Relationships] FOREIGN KEY([RelationshipID]) REFERENCES {databaseOwner}[{objectQualifier}Relationships] ([RelationshipID]) ON DELETE CASCADE		
		ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationships]
			ADD CONSTRAINT [FK_{objectQualifier}UserRelationships_{objectQualifier}Users] FOREIGN KEY([UserID]) REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) 
		ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationships]			
			ADD CONSTRAINT [FK_{objectQualifier}UserRelationships_{objectQualifier}Users_OnRelatedUser] FOREIGN KEY([RelationshipID]) REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) 
	END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UserRelationshipPreferences]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}UserRelationshipPreferences]
		(		
			[PreferenceID] [int] IDENTITY(1,1) NOT NULL,	
			[UserID] [int] NOT NULL,
			[RelationshipID] [int] NOT NULL,
			[DefaultResponse] [int] NOT NULL,
			[CreatedByUserID] [int] NOT NULL,
			[CreatedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}UserRelationshipPreferences_CreatedOnDate]  DEFAULT (getdate()) NOT NULL ,
			[LastModifiedByUserID] [int] NOT NULL,
			[LastModifiedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}UserRelationshipPreferences_LastModifiedOnDate]  DEFAULT (getdate()) NOT NULL,
			CONSTRAINT [PK_{objectQualifier}UserRelationshipPreferences] PRIMARY KEY CLUSTERED ( [PreferenceID] ASC, [RelationshipID] ASC )
		)				
		
		ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationshipPreferences]  
			ADD CONSTRAINT [FK_{objectQualifier}UserRelationshipPreferences_{objectQualifier}Relationships] FOREIGN KEY([RelationshipID]) REFERENCES {databaseOwner}[{objectQualifier}Relationships] ([RelationshipID]) ON DELETE CASCADE		
		ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationshipPreferences]
			ADD CONSTRAINT [FK_{objectQualifier}UserRelationshipPreferences_{objectQualifier}Users] FOREIGN KEY([UserID]) REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) 
	END
GO

-- Add rows to {databaseOwner}[{objectQualifier}RelationshipTypes
IF NOT EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}RelationshipTypes] WHERE [Name] = N'Friends')
    BEGIN
	    INSERT INTO {databaseOwner}[{objectQualifier}RelationshipTypes] ([Direction], [Name], [Description],[CreatedByUserID],[LastModifiedByUserID]) VALUES (2, N'Friends', N'Friends',-1,-1)
	END
GO
IF NOT EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}RelationshipTypes] WHERE [Name] = N'Followers')
    BEGIN
	    INSERT INTO {databaseOwner}[{objectQualifier}RelationshipTypes] ([Direction], [Name], [Description],[CreatedByUserID],[LastModifiedByUserID]) VALUES (1, N'Followers', N'Followers',-1,-1)
	END
GO

--CRUD SPs for RelationshipType
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetAllRelationshipTypes]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetAllRelationshipTypes]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAllRelationshipTypes]
AS 
    SELECT  RelationshipTypeID,
            Direction,
            Name ,            
            Description,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}RelationshipTypes    
	ORDER BY RelationshipTypeID ASC
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetRelationshipType]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetRelationshipType]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRelationshipType] @RelationshipTypeID INT
AS 
    SELECT  RelationshipTypeID,
            Direction,
            Name ,            
            Description,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}RelationshipTypes    
	WHERE RelationshipTypeID = @RelationshipTypeID
	ORDER BY RelationshipTypeID ASC    
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteRelationshipType]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteRelationshipType]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteRelationshipType] @RelationshipTypeID INT	
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}RelationshipTypes  
			WHERE RelationshipTypeID = @RelationshipTypeID
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveRelationshipType]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveRelationshipType]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveRelationshipType]
    @RelationshipTypeID INT ,
    @Direction INT ,
    @Name NVARCHAR(50) ,
    @Description NVARCHAR(500) ,
    @UserID INT
AS 
    IF ( @RelationshipTypeID = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}RelationshipTypes
                    ( Direction,
                      Name ,            
                      Description,					
                      CreatedByUserID ,
                      CreatedOnDate ,
                      LastModifiedByUserID ,
                      LastModifiedOnDate
			        
                    )
            VALUES  ( @Direction , --  @Direction INT 
                      @Name , -- Name - nvarchar(50)
                      @Description , -- @Description NVARCHAR(500)
                      @UserID , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @UserID , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime
			        
                    )
                    
            SELECT  @RelationshipTypeID = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}RelationshipTypes
            SET     Name = @Name ,
                    Direction = @Direction ,
                    Description = @Description ,
                    LastModifiedByUserID = @UserID ,
                    LastModifiedOnDate = GETDATE()
            WHERE   RelationshipTypeID = @RelationshipTypeID
        END
        
    SELECT  @RelationshipTypeID
GO

--CRUD SPs for Relationships

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetRelationship]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetRelationship]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRelationship] @RelationshipID INT
AS 
    SELECT  RelationshipID,
            RelationshipTypeID,            
            Name,            
            Description,
            UserID,
            PortalID,
            DefaultResponse,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}Relationships    
	WHERE RelationshipID = @RelationshipID
	ORDER BY RelationshipID ASC    
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetRelationshipsByUserID]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetRelationshipsByUserID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRelationshipsByUserID] @UserID INT
AS 
    SELECT  RelationshipID,
			RelationshipTypeID,            
            Name,            
            Description,
			UserID,
			PortalID,
			DefaultResponse,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}Relationships    
	WHERE UserID = @UserID
	ORDER BY RelationshipID ASC    
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetRelationshipsByPortalID]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetRelationshipsByPortalID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRelationshipsByPortalID] @PortalID INT
AS 
    SELECT  RelationshipID,
			RelationshipTypeID,            
            Name,            
            Description,
			UserID,
			PortalID,
			DefaultResponse,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}Relationships    
	WHERE PortalID = @PortalID AND UserID IS NULL
	ORDER BY RelationshipID ASC    
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteRelationship]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteRelationship]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteRelationship] @RelationshipID INT	
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}Relationships  
			WHERE RelationshipID = @RelationshipID
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteRelationshipByUserID]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteRelationshipByUserID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteRelationshipByUserID] @UserID INT	
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}Relationships  
			WHERE UserID = @UserID
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteRelationshipByPortalID]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteRelationshipByPortalID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteRelationshipByPortalID] @PortalID INT	
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}Relationships  
			WHERE PortalID = @PortalID
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveRelationship]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveRelationship]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveRelationship]
    @RelationshipID INT,
    @RelationshipTypeID INT,    
    @Name NVARCHAR(50),
    @Description NVARCHAR(500),
	@UserID INT,
	@PortalID INT,
	@DefaultResponse INT,
	@CreateUpdateUserID INT
    
AS 
    IF ( @RelationshipID = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}Relationships
                    ( RelationshipTypeID,
                      Name ,            
                      Description,					
					  UserID,
					  PortalID,		
					  DefaultResponse,			
                      CreatedByUserID ,
                      CreatedOnDate ,
                      LastModifiedByUserID ,
                      LastModifiedOnDate
			        
                    )
            VALUES  ( @RelationshipTypeID , -- @RelationshipTypeID INT
                      @Name , -- Name - nvarchar(50)
                      @Description , -- @Description NVARCHAR(500)
					  @UserID , -- @UserID int
					  @PortalID , -- @PortalID int
					  @DefaultResponse, -- @DefaultResponse int
                      @CreateUpdateUserID , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @CreateUpdateUserID , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime
			        
                    )
                    
            SELECT  @RelationshipID = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}Relationships
            SET     Name = @Name ,                    
                    Description = @Description,
					RelationshipTypeID = @RelationshipTypeID,
					UserID = @UserID,
					PortalID = @PortalID,
					DefaultResponse = @DefaultResponse,
                    LastModifiedByUserID = @CreateUpdateUserID,
                    LastModifiedOnDate = GETDATE()
            WHERE   RelationshipID = @RelationshipID
        END
        
    SELECT  @RelationshipID
GO

--CRUD SPs for UserRelationships

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserRelationship]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationship]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationship] @UserRelationshipID INT
AS 
    SELECT  UserRelationshipID,
			UserID,
			RelatedUserID,
			RelationshipID,            
			Status,            
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}UserRelationships    
	WHERE UserRelationshipID = @UserRelationshipID
	ORDER BY UserRelationshipID ASC    
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserRelationshipsByUserRelationshipAndStatus]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipsByUserRelationshipAndStatus]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipsByUserRelationshipAndStatus] 
	@UserID INT,	
	@RelationshipID INT,
	@Direction INT,
	@Status INT
AS 
	IF ( @Direction = 1 ) --OneWay
	  BEGIN
		 SELECT  UserRelationshipID,
			UserID,
			RelatedUserID,
			RelationshipID,            
			Status,            
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
		FROM    {databaseOwner}{objectQualifier}UserRelationships    
		WHERE UserID = @UserID	
		AND   RelationshipID = @RelationshipID
		AND   Status = @Status
		ORDER BY UserRelationshipID ASC    
	  END
	  ELSE IF ( @Direction = 2 ) --TwoWay
	  BEGIN
		 SELECT  UserRelationshipID,
			UserID,
			RelatedUserID,
			RelationshipID,            
			Status,            
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
		FROM    {databaseOwner}{objectQualifier}UserRelationships    
		WHERE (UserID = @UserID OR RelatedUserID = @UserID)	--Check UserId in both the columns
		AND   RelationshipID = @RelationshipID
		AND   Status = @Status
		ORDER BY UserRelationshipID ASC    		  
	  END       
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserRelationshipsByMultipleIDs]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipsByMultipleIDs]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipsByMultipleIDs] 
	@UserID INT,
	@RelatedUserID INT,
	@RelationshipID INT,
	@Direction INT
AS 
	IF ( @Direction = 1 ) --OneWay
	  BEGIN
		SELECT  UserRelationshipID,
				UserID,
				RelatedUserID,
				RelationshipID,            
				Status,            
				CreatedByUserID ,
				CreatedOnDate ,
				LastModifiedByUserID ,
				LastModifiedOnDate
		FROM    {databaseOwner}{objectQualifier}UserRelationships    
		WHERE UserID = @UserID
		AND   RelatedUserID = @RelatedUserID
		AND   RelationshipID = @RelationshipID
		ORDER BY UserRelationshipID ASC    
	  END
	  ELSE IF ( @Direction = 2 ) --TwoWay
	  BEGIN
		SELECT  UserRelationshipID,
				UserID,
				RelatedUserID,
				RelationshipID,            
				Status,            
				CreatedByUserID ,
				CreatedOnDate ,
				LastModifiedByUserID ,
				LastModifiedOnDate
		FROM    {databaseOwner}{objectQualifier}UserRelationships    		
		WHERE (  (UserID = @UserID AND RelatedUserID = @RelatedUserID) 
			  OR (RelatedUserID = @UserID AND UserID = @RelatedUserID) --swap userids and check
			  )
		AND   RelationshipID = @RelationshipID
		ORDER BY UserRelationshipID ASC    
	  END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserRelationshipsByUserID]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipsByUserID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipsByUserID] @UserID INT
AS 
    SELECT  UserRelationshipID,
			UserID,
			RelatedUserID,
			RelationshipID,            
			Status,            
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}UserRelationships    
	WHERE UserID = @UserID
	ORDER BY UserRelationshipID ASC    
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserRelationshipsByRelatedUserID]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipsByRelatedUserID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipsByRelatedUserID] @RelatedUserID INT
AS 
    SELECT  UserRelationshipID,
			UserID,
			RelatedUserID,
			RelationshipID,            
			Status,            
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}UserRelationships    
	WHERE RelatedUserID = @RelatedUserID
	ORDER BY UserRelationshipID ASC    
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserRelationshipsByRelatedUser]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipsByRelatedUser]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipsByRelatedUser] 
    @RelatedUserID INT,
    @RelationshipID INT,
    @Status INT
AS 
    SELECT  UserRelationshipID,
			UserID,
			RelatedUserID,
			RelationshipID,            
			Status,            
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}UserRelationships    
	WHERE RelatedUserID = @RelatedUserID
	  AND RelationshipID = @RelationshipID
	  AND Status = @Status
	ORDER BY UserRelationshipID ASC    
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserRelationshipsByRelationshipID]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipsByRelationshipID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipsByRelationshipID] @RelationshipID INT
AS 
    SELECT  UserRelationshipID,
			UserID,
			RelatedUserID,
			RelationshipID,            
			Status,            
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}UserRelationships    
	WHERE RelationshipID = @RelationshipID
	ORDER BY UserRelationshipID ASC    
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteUserRelationship]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserRelationship]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserRelationship] @UserRelationshipID INT	
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}UserRelationships  
			WHERE UserRelationshipID = @UserRelationshipID
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteUserRelationshipByUserID]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserRelationshipByUserID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserRelationshipByUserID] @UserID INT	
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}UserRelationships  
			WHERE UserID = @UserID
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteUserRelationshipByRelatedUserID]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserRelationshipByRelatedUserID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserRelationshipByRelatedUserID] @RelatedUserID INT	
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}UserRelationships  
			WHERE RelatedUserID = @RelatedUserID
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteUserRelationshipByRelationshipID]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserRelationshipByRelationshipID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserRelationshipByRelationshipID] @RelationshipID INT	
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}UserRelationships  
			WHERE RelationshipID = @RelationshipID
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveUserRelationship]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveUserRelationship]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveUserRelationship]
    @UserRelationshipID INT,
	@UserID INT,
	@RelatedUserID INT,
	@RelationshipID INT,
	@Status INT,
	@CreateUpdateUserID INT
    
AS 
    IF ( @UserRelationshipID = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}UserRelationships
                    ( UserID,
					  RelatedUserID,					
					  RelationshipID,
					  Status,
                      CreatedByUserID ,
                      CreatedOnDate ,
                      LastModifiedByUserID ,
                      LastModifiedOnDate
			        
                    )
            VALUES  ( @UserID , -- @UserID int
					  @RelatedUserID , -- @RelatedUserlID int
					  @RelationshipID, -- @RelationshipID int
					  @Status , -- @Status int
                      @CreateUpdateUserID , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @CreateUpdateUserID , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime
			        
                    )
                    
            SELECT  @RelationshipID = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}UserRelationships
            SET     UserID = @UserID,
					RelatedUserID = @RelatedUserID,
					RelationshipID = @RelationshipID,
					Status = @Status,
                    LastModifiedByUserID = @CreateUpdateUserID,
                    LastModifiedOnDate = GETDATE()
            WHERE   UserRelationshipID = @UserRelationshipID
        END
        
    SELECT  @UserRelationshipID
GO

--CRUD SPs for UserRelationshipPreferences

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserRelationshipPreferenceByID]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipPreferenceByID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipPreferenceByID] 
	@PreferenceID INT	
AS 
    SELECT  PreferenceID,
			UserID,
			RelationshipID,            
			DefaultResponse,            
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}UserRelationshipPreferences    
	WHERE @PreferenceID = @PreferenceID	  
	ORDER BY PreferenceID ASC
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserRelationshipPreference]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipPreference]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipPreference] 
	@UserID INT,
	@RelationshipID INT
AS 
    SELECT  PreferenceID,
			UserID,
			RelationshipID,            
			DefaultResponse,            
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}UserRelationshipPreferences    
	WHERE UserID = @UserID
	  AND RelationshipID = @RelationshipID
	ORDER BY UserID ASC, RelationshipID ASC
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteUserRelationshipPreference]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserRelationshipPreference]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserRelationshipPreference]
	@PreferenceID INT	
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}UserRelationshipPreferences  
		WHERE PreferenceID = @PreferenceID

	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveUserRelationshipPreference]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveUserRelationshipPreference]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveUserRelationshipPreference]
    @PreferenceID INT,
	@UserID INT,	
	@RelationshipID INT,
	@DefaultResponse INT,
	@CreateUpdateUserID INT
    
AS 
    IF ( @PreferenceID = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}UserRelationshipPreferences
                    ( UserID,					  
					  RelationshipID,
					  DefaultResponse,
                      CreatedByUserID ,
                      CreatedOnDate ,
                      LastModifiedByUserID ,
                      LastModifiedOnDate
			        
                    )
            VALUES  ( @UserID , -- @UserID int					  
					  @RelationshipID, -- @RelationshipID int
					  @DefaultResponse , -- @DefaultResponse int
                      @CreateUpdateUserID , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @CreateUpdateUserID , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime
			        
                    )
                    
            SELECT  @PreferenceID = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}UserRelationshipPreferences
            SET     UserID = @UserID,					
					RelationshipID = @RelationshipID,
					DefaultResponse = @DefaultResponse,
                    LastModifiedByUserID = @CreateUpdateUserID,
                    LastModifiedOnDate = GETDATE()
            WHERE   PreferenceID = @PreferenceID
        END
        
    SELECT  @PreferenceID
        
GO

/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/
