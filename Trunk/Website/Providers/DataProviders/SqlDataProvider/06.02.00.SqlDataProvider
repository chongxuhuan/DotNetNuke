/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

/* Drop Level Column From Tabs Table */
/*************************************/

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME='{objectQualifier}Tabs' AND COLUMN_NAME='Level')
	BEGIN
		ALTER TABLE {databaseOwner}{objectQualifier}Tabs
			DROP CONSTRAINT DF_{objectQualifier}Tabs_Level
		-- Drop Column
		ALTER TABLE {databaseOwner}{objectQualifier}Tabs
			DROP COLUMN Level
	END
GO

/* Drop TabPath Column From Tabs Table */
/***************************************/

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME='{objectQualifier}Tabs' AND COLUMN_NAME='TabPath')
	BEGIN
		-- Drop Column
		ALTER TABLE {databaseOwner}{objectQualifier}Tabs
			DROP COLUMN  TabPath
	END
GO

/* Add RemoveStringCharacters Function */
/***************************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}RemoveStringCharacters]') and OBJECTPROPERTY(id, N'IsScalarFunction') = 1)
	DROP FUNCTION {databaseOwner}[{objectQualifier}RemoveStringCharacters]
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}RemoveStringCharacters]
(
		@string nvarchar(max), 
		@remove nvarchar(100)
)
RETURNS nvarchar(max)
AS
BEGIN
    WHILE @string LIKE '%[' + @remove + ']%'
    BEGIN
        SET @string = REPLACE(@string,SUBSTRING(@string,PATINDEX('%[' + @remove + ']%',@string),1),'')
    END

    RETURN @string
END

GO

/* Update Tabs View to use CTEs */
/********************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_Tabs]') and OBJECTPROPERTY(id, N'IsView') = 1)
	DROP VIEW {databaseOwner}[{objectQualifier}vw_Tabs]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_Tabs]
AS
	WITH RecursiveTabs (TabID, Level, TabPath)
	AS	
	(
		SELECT 
			TabID,
			0 AS Level,
			CAST('//' + {databaseOwner}{objectQualifier}RemoveStringCharacters(TabName, '&? ') AS NVARCHAR(255)) AS TabPath
		FROM {objectQualifier}Tabs
		WHERE ParentId IS Null
	  
		UNION ALL
	  
		SELECT 
			T.TabID,
			Level + 1,
			CAST(TabPath + '//' + {databaseOwner}{objectQualifier}RemoveStringCharacters(TabName, '&? ') AS NVARCHAR(255))
		FROM {objectQualifier}Tabs T
		INNER JOIN RecursiveTabs R ON T.ParentId = R.TabID
	)

	SELECT     
		T.TabID, 
		T.TabOrder, 
		T.PortalID, 
		T.TabName, 
		T.ParentId, 
		R.[Level], 
		R.TabPath, 
		T.UniqueId, 
		T.VersionGuid, 
		T.DefaultLanguageGuid, 
		T.LocalizedVersionGuid, 
		T.IsVisible, 
		CASE WHEN LEFT(LOWER(T .IconFile), 7) = 'fileid=' THEN
			(SELECT Folder + FileName
				FROM {objectQualifier}Files
				WHERE fileid = CAST((RIGHT(LOWER(T.IconFile), Len(T.IconFile) - 7)) AS int)
			) ELSE T.IconFile 
			END AS IconFile, 
		CASE WHEN LEFT(LOWER(T .IconFileLarge), 7) = 'fileid=' THEN
			(SELECT Folder + FileName
				FROM  {objectQualifier}Files
				WHERE fileid = CAST((RIGHT(LOWER(T.IconFileLarge), Len(T.IconFileLarge) - 7)) AS int)
			) ELSE T.IconFileLarge
			END AS IconFileLarge, 
		T.DisableLink, 
		T.Title, 
		T.Description, 
		T.KeyWords, 
		T.IsDeleted, 
		T.SkinSrc, 
		T.ContainerSrc, 
		T.StartDate, 
		T.EndDate, 
		T.Url, 
		CASE WHEN EXISTS (SELECT 1 FROM {objectQualifier}Tabs T2 WHERE T2.ParentId = T.TabId) THEN 'true' ELSE 'false' END AS HasChildren, 
		T.RefreshInterval, 
		T.PageHeadText, 
		T.IsSecure, 
		T.PermanentRedirect, 
		T.SiteMapPriority, 
		CI.ContentItemID, 
		CI.[Content], 
		CI.ContentTypeID, 
		CI.ModuleID, 
		CI.ContentKey, 
		CI.Indexed, 
		T.CultureCode, 
		T.CreatedByUserID, 
		T.CreatedOnDate, 
		T.LastModifiedByUserID, 
		T.LastModifiedOnDate
	FROM  RecursiveTabs R 
		INNER JOIN {objectQualifier}Tabs AS T ON R.TabID = T.TabID
		LEFT OUTER JOIN {objectQualifier}ContentItems AS CI ON T.ContentItemID = CI.ContentItemID

GO

/* Update AddTab Procedure */
/***************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddTab]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddTab]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTab] 
    @ContentItemID			int,
    @PortalID				int,
    @TabOrder				int,
    @UniqueId				uniqueidentifier,
    @VersionGuid			uniqueidentifier,
    @DefaultLanguageGuid	uniqueidentifier,
    @LocalizedVersionGuid	uniqueidentifier,
    @TabName				nvarchar(50),
    @IsVisible				bit,
    @DisableLink			bit,
    @ParentId				int,
    @IconFile				nvarchar(100),
    @IconFileLarge			nvarchar(100),
    @Title					nvarchar(200),
    @Description			nvarchar(500),
    @KeyWords				nvarchar(500),
    @Url					nvarchar(255),
    @SkinSrc				nvarchar(200),
    @ContainerSrc			nvarchar(200),
    @StartDate				datetime,
    @EndDate				datetime,
    @RefreshInterval		int,
    @PageHeadText			nvarchar(500),
    @IsSecure				bit,
    @PermanentRedirect		bit,
    @SiteMapPriority		float,
    @CreatedByUserID		int,
    @CultureCode			nvarchar(50)

AS

    INSERT INTO {objectQualifier}Tabs (
        ContentItemID,
        PortalID,
        TabOrder,
        UniqueId,
        VersionGuid,
        DefaultLanguageGuid,
        LocalizedVersionGuid,
        TabName,
        IsVisible,
        DisableLink,
        ParentId,
        IconFile,
        IconFileLarge,
        Title,
        Description,
        KeyWords,
        IsDeleted,
        Url,
        SkinSrc,
        ContainerSrc,
        StartDate,
        EndDate,
        RefreshInterval,
        PageHeadText,
        IsSecure,
        PermanentRedirect,
        SiteMapPriority,
        CreatedByUserID,
        CreatedOnDate,
        LastModifiedByUserID,
        LastModifiedOnDate,
        CultureCode
    )
    VALUES (
        @ContentItemID,
        @PortalID,
        @TabOrder,
        @UniqueId,
        @VersionGuid,
        @DefaultLanguageGuid,
        @LocalizedVersionGuid,
        @TabName,
        @IsVisible,
        @DisableLink,
        @ParentId,
        @IconFile,
        @IconFileLarge,
        @Title,
        @Description,
        @KeyWords,
        0,
        @Url,
        @SkinSrc,
        @ContainerSrc,
        @StartDate,
        @EndDate,
        @RefreshInterval,
        @PageHeadText,
        @IsSecure,
        @PermanentRedirect,
        @SiteMapPriority,
        @CreatedByUserID,
        getdate(),
        @CreatedByUserID,
        getdate(),
        @CultureCode
    )

    SELECT SCOPE_IDENTITY()

GO

/* Update GetAllTabs Procedure */
/*******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetAllTabs]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetAllTabs]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAllTabs] 
AS
	SELECT *
		FROM {objectQualifier}vw_Tabs
		ORDER BY Level, ParentID, TabOrder
GO

/* Update GetTabPaths Procedure */
/*******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetTabPaths]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetTabPaths]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabPaths] 
	@PortalID		int,
	@CultureCode	nvarchar(10)
AS
	SELECT
		TabID, 
		PortalID, 
		TabPath
	FROM {objectQualifier}vw_Tabs
	WHERE (PortalID = @PortalID AND (CultureCode = @CultureCode OR CultureCode Is Null))
		OR @PortalID Is NULL
GO

/* Update UpdateTab Procedure */
/*******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateTab]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateTab]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTab] 
    @TabId					int,
    @ContentItemID			int,
    @PortalId				int,
    @VersionGuid			uniqueidentifier,
    @DefaultLanguageGuid	uniqueidentifier,
    @LocalizedVersionGuid	uniqueidentifier,
    @TabName				nvarchar(50),
    @IsVisible				bit,
    @DisableLink			bit,
    @ParentId				int,
    @IconFile				nvarchar(100),
    @IconFileLarge			nvarchar(100),
    @Title					nvarchar(200),
    @Description			nvarchar(500),
    @KeyWords				nvarchar(500),
    @IsDeleted				bit,
    @Url					nvarchar(255),
    @SkinSrc				nvarchar(200),
    @ContainerSrc			nvarchar(200),
    @StartDate				datetime,
    @EndDate				datetime,
    @RefreshInterval		int,
    @PageHeadText			nvarchar(500),
    @IsSecure				bit,
    @PermanentRedirect		bit,
    @SiteMapPriority		float,
    @LastModifiedByUserID	int,
    @CultureCode			nvarchar(50)

AS

    UPDATE {objectQualifier}Tabs
        SET
            ContentItemID			= @ContentItemID,
            PortalId				= @PortalId,
            VersionGuid				= @VersionGuid,
            DefaultLanguageGuid		= @DefaultLanguageGuid,
            LocalizedVersionGuid	= @LocalizedVersionGuid,
            TabName					= @TabName,
            IsVisible				= @IsVisible,
            DisableLink				= @DisableLink,
            ParentId				= @ParentId,
            IconFile				= @IconFile,
            IconFileLarge			= @IconFileLarge,
            Title					= @Title,
            Description				= @Description,
            KeyWords				= @KeyWords,
            IsDeleted				= @IsDeleted,
            Url						= @Url,
            SkinSrc					= @SkinSrc,
            ContainerSrc			= @ContainerSrc,
            StartDate				= @StartDate,
            EndDate					= @EndDate,
            RefreshInterval			= @RefreshInterval,
            PageHeadText			= @PageHeadText,
            IsSecure				= @IsSecure,
            PermanentRedirect		= @PermanentRedirect,
            SiteMapPriority			= @SiteMapPriority,
            LastModifiedByUserID	= @LastModifiedByUserID,
            LastModifiedOnDate		= getdate(),
            CultureCode				= @CultureCode
    WHERE  TabId = @TabId

GO

/* Update UpdateTabOrder Procedure */
/***********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateTabOrder]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateTabOrder]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTabOrder] 
	@TabId					int,
	@TabOrder				int,
	@ParentId				int,
	@LastModifiedByUserID	int
AS

	UPDATE {objectQualifier}Tabs
		SET
			TabOrder				= @TabOrder,
			ParentId				= @ParentId,
			LastModifiedByUserID	= @LastModifiedByUserID,
			LastModifiedOnDate		= getdate()
	WHERE  TabId = @TabId
GO

/* Add AddTabBefore Procedure */
/******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddTabBefore]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddTabBefore]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTabBefore] 
	@BeforeTabID			int,
	@ContentItemID			int,
    @PortalID				int,
    @UniqueId				uniqueidentifier,
    @VersionGuid			uniqueidentifier,
    @DefaultLanguageGuid	uniqueidentifier,
    @LocalizedVersionGuid	uniqueidentifier,
    @TabName				nvarchar(50),
    @IsVisible				bit,
    @DisableLink			bit,
    @ParentId				int,
    @IconFile				nvarchar(100),
    @IconFileLarge			nvarchar(100),
    @Title					nvarchar(200),
    @Description			nvarchar(500),
    @KeyWords				nvarchar(500),
    @Url					nvarchar(255),
    @SkinSrc				nvarchar(200),
    @ContainerSrc			nvarchar(200),
    @StartDate				datetime,
    @EndDate				datetime,
    @RefreshInterval		int,
    @PageHeadText			nvarchar(500),
    @IsSecure				bit,
    @PermanentRedirect		bit,
    @SiteMapPriority		float,
    @CreatedByUserID		int,
    @CultureCode			nvarchar(50)

AS

	BEGIN
		DECLARE @TabId int
		DECLARE @TabOrder INT 
		SELECT @TabOrder = TabOrder FROM {objectQualifier}Tabs WHERE TabID = @BeforeTabID
		
		-- Update TabOrders for all Tabs higher than @TabOrder
		UPDATE {objectQualifier}Tabs
			SET TabOrder = TabOrder + 2
			WHERE (ParentId = @ParentId OR (ParentId IS NULL AND @ParentID IS NULL))
				AND TabOrder >= @TabOrder
		
		-- Create Tab
		EXECUTE @TabId = {objectQualifier}AddTab 
							@ContentItemID,
							@PortalID,
							@TabOrder,
							@UniqueId,
							@VersionGuid,
							@DefaultLanguageGuid,
							@LocalizedVersionGuid,
							@TabName,
							@IsVisible,
							@DisableLink,
							@ParentId,
							@IconFile,
							@IconFileLarge,
							@Title,
							@Description,
							@KeyWords,
							@Url,
							@SkinSrc,
							@ContainerSrc,
							@StartDate,
							@EndDate,
							@RefreshInterval,
							@PageHeadText,
							@IsSecure,
							@PermanentRedirect,
							@SiteMapPriority,
							@CreatedByUserID,
							@CultureCode;
		
		-- Update Content Item
		UPDATE {objectQualifier}ContentItems
			SET TabID = @TabId
			WHERE ContentItemID = @ContentItemID

		SELECT @TabId
	END
GO

/* Add AddTabAfter Procedure */
/*****************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddTabAfter]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddTabAfter]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTabAfter] 
	@AfterTabID				int,
	@ContentItemID			int,
    @PortalID				int,
    @UniqueId				uniqueidentifier,
    @VersionGuid			uniqueidentifier,
    @DefaultLanguageGuid	uniqueidentifier,
    @LocalizedVersionGuid	uniqueidentifier,
    @TabName				nvarchar(50),
    @IsVisible				bit,
    @DisableLink			bit,
    @ParentId				int,
    @IconFile				nvarchar(100),
    @IconFileLarge			nvarchar(100),
    @Title					nvarchar(200),
    @Description			nvarchar(500),
    @KeyWords				nvarchar(500),
    @Url					nvarchar(255),
    @SkinSrc				nvarchar(200),
    @ContainerSrc			nvarchar(200),
    @StartDate				datetime,
    @EndDate				datetime,
    @RefreshInterval		int,
    @PageHeadText			nvarchar(500),
    @IsSecure				bit,
    @PermanentRedirect		bit,
    @SiteMapPriority		float,
    @CreatedByUserID		int,
    @CultureCode			nvarchar(50)

AS

	BEGIN
		DECLARE @TabId int
		DECLARE @TabOrder INT 
		SET @TabOrder = (SELECT TabOrder FROM {objectQualifier}Tabs WHERE TabID = @AfterTabID)
		
		-- Update TabOrders for all Tabs higher than @TabOrder
		UPDATE {objectQualifier}Tabs
			SET TabOrder = TabOrder + 2
			WHERE (ParentId = @ParentId OR (ParentId IS NULL AND @ParentID IS NULL))
				AND TabOrder > @TabOrder
		
		-- Create Tab
		SET @TabOrder = @TabOrder + 2
		EXECUTE @TabId = {objectQualifier}AddTab 
							@ContentItemID,
							@PortalID,
							@TabOrder,
							@UniqueId,
							@VersionGuid,
							@DefaultLanguageGuid,
							@LocalizedVersionGuid,
							@TabName,
							@IsVisible,
							@DisableLink,
							@ParentId,
							@IconFile,
							@IconFileLarge,
							@Title,
							@Description,
							@KeyWords,
							@Url,
							@SkinSrc,
							@ContainerSrc,
							@StartDate,
							@EndDate,
							@RefreshInterval,
							@PageHeadText,
							@IsSecure,
							@PermanentRedirect,
							@SiteMapPriority,
							@CreatedByUserID,
							@CultureCode;
		
		-- Update Content Item
		UPDATE {objectQualifier}ContentItems
			SET TabID = @TabId
			WHERE ContentItemID = @ContentItemID

		SELECT @TabId
	END
GO

/* Add AddTabToEnd Procedure */
/*****************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddTabToEnd]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddTabToEnd]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTabToEnd] 
	@ContentItemID			int,
    @PortalID				int,
    @UniqueId				uniqueidentifier,
    @VersionGuid			uniqueidentifier,
    @DefaultLanguageGuid	uniqueidentifier,
    @LocalizedVersionGuid	uniqueidentifier,
    @TabName				nvarchar(50),
    @IsVisible				bit,
    @DisableLink			bit,
    @ParentId				int,
    @IconFile				nvarchar(100),
    @IconFileLarge			nvarchar(100),
    @Title					nvarchar(200),
    @Description			nvarchar(500),
    @KeyWords				nvarchar(500),
    @Url					nvarchar(255),
    @SkinSrc				nvarchar(200),
    @ContainerSrc			nvarchar(200),
    @StartDate				datetime,
    @EndDate				datetime,
    @RefreshInterval		int,
    @PageHeadText			nvarchar(500),
    @IsSecure				bit,
    @PermanentRedirect		bit,
    @SiteMapPriority		float,
    @CreatedByUserID		int,
    @CultureCode			nvarchar(50)

AS

	BEGIN
		DECLARE @TabId int
		DECLARE @TabOrder int 
		SET @TabOrder = (SELECT MAX(TabOrder) FROM {objectQualifier}Tabs WHERE (ParentId = @ParentId OR (ParentId IS NULL AND @ParentID IS NULL)))
		IF @TabOrder IS NULL
			SET @TabOrder = 1
		ELSE
			SET @TabOrder = @TabOrder + 2

		-- Create Tab
		EXECUTE @TabId = {objectQualifier}AddTab 
							@ContentItemID,
							@PortalID,
							@TabOrder,
							@UniqueId,
							@VersionGuid,
							@DefaultLanguageGuid,
							@LocalizedVersionGuid,
							@TabName,
							@IsVisible,
							@DisableLink,
							@ParentId,
							@IconFile,
							@IconFileLarge,
							@Title,
							@Description,
							@KeyWords,
							@Url,
							@SkinSrc,
							@ContainerSrc,
							@StartDate,
							@EndDate,
							@RefreshInterval,
							@PageHeadText,
							@IsSecure,
							@PermanentRedirect,
							@SiteMapPriority,
							@CreatedByUserID,
							@CultureCode;
		
		-- Update Content Item
		UPDATE {objectQualifier}ContentItems
			SET TabID = @TabId
			WHERE ContentItemID = @ContentItemID

		SELECT @TabId
	END
GO

/* Update DeleteTab Procedure */
/******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteTab]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteTab]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteTab] 
	@TabId int
AS
	BEGIN
		DECLARE @TabOrder INT
		SET @TabOrder = (SELECT TabOrder FROM {objectQualifier}Tabs WHERE TabID = @TabId)

		DECLARE @ParentID INT
		SET @ParentID = (SELECT ParentID FROM {objectQualifier}Tabs WHERE TabID = @TabId)

		DECLARE @ContentItemID INT
		SET @ContentItemID = (SELECT ContentItemID FROM {objectQualifier}Tabs WHERE TabID = @TabId)

		-- Delete Tab --
		DELETE FROM {objectQualifier}Tabs
			WHERE  TabId = @TabId

		-- Update TabOrder of remaining Tabs --
		UPDATE {objectQualifier}Tabs
			SET TabOrder = TabOrder - 2
			WHERE (ParentId = @ParentId OR (ParentId IS NULL AND @ParentID IS NULL))
				AND TabOrder > @TabOrder
			
		-- Delete Content Item --
		DELETE {objectQualifier}ContentItems
			WHERE ContentItemID = @ContentItemID
	END

GO

/* Add MoveTabAfter Procedure */
/******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}MoveTabAfter]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}MoveTabAfter]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}MoveTabAfter] 
	@TabId					int,
	@AfterTabId				int,
	@LastModifiedByUserID	int
AS
	BEGIN
		DECLARE @OldParentId int
		DECLARE @NewParentId int
		
		SET @OldParentId = (SELECT ParentId FROM {objectQualifier}Tabs WHERE TabID = @TabId)
		SET @NewParentId = (SELECT ParentId FROM {objectQualifier}Tabs WHERE TabID = @AfterTabId)
		
		DECLARE @TabOrder int
		SET @TabOrder = (SELECT TabOrder FROM {objectQualifier}Tabs WHERE TabID = @TabId)
		
		IF (@OldParentId <> @NewParentId OR NOT (@OldParentId IS NULL AND @NewParentId IS NULL))
			-- Parent has changed
			BEGIN
				-- update TabOrder of Tabs with same original Parent
				UPDATE {objectQualifier}Tabs
					SET TabOrder = TabOrder - 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder

				-- Get TabOrder of AfterTab
				SET @TabOrder = (SELECT TabOrder FROM {objectQualifier}Tabs WHERE TabID = @AfterTabId)
						
				-- update TabOrder of Tabs with same new Parent
				UPDATE {objectQualifier}Tabs
					SET TabOrder = TabOrder + 2
					WHERE (ParentId = @NewParentId OR (ParentId IS NULL AND @NewParentId IS NULL)) 
						AND TabOrder > @TabOrder

				-- Update Tab with new TabOrder
				UPDATE {objectQualifier}Tabs
					SET 
						ParentId				= @NewParentId,
						TabOrder				= @TabOrder + 2,
						LastModifiedByUserID	= @LastModifiedByUserID,
						LastModifiedOnDate		= getdate()					
					WHERE TabID = @TabId
				
			END
		ELSE
			-- Parent has not changed
			BEGIN
				-- Remove Tab from TabOrder
				UPDATE {objectQualifier}Tabs
					SET TabOrder = -1
					WHERE TabID = @TabId
					
				-- Reorder
				UPDATE {objectQualifier}Tabs
					SET TabOrder = TabOrder - 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder
						AND TabId <> @TabId
						
				-- Get TabOrder of AfterTab
				SET @TabOrder = (SELECT TabOrder FROM {objectQualifier}Tabs WHERE TabID = @AfterTabId)
										
				-- Reorder					
				UPDATE {objectQualifier}Tabs
					SET TabOrder = TabOrder + 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder

				-- Update Tab with new TabOrder
				UPDATE {objectQualifier}Tabs
					SET 
						TabOrder				= @TabOrder + 2,
						LastModifiedByUserID	= @LastModifiedByUserID,
						LastModifiedOnDate		= getdate()					
					WHERE TabID = @TabId
			END			
	END

GO

/* Add MoveTabBefore Procedure */
/*******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}MoveTabBefore]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}MoveTabBefore]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}MoveTabBefore] 
	@TabId					int,
	@BeforeTabId			int,
	@LastModifiedByUserID	int
AS
	BEGIN
		DECLARE @OldParentId int
		DECLARE @NewParentId int
		
		SET @OldParentId = (SELECT ParentId FROM {objectQualifier}Tabs WHERE TabID = @TabId)
		SET @NewParentId = (SELECT ParentId FROM {objectQualifier}Tabs WHERE TabID = @BeforeTabId)
		
		DECLARE @TabOrder int
		SET @TabOrder = (SELECT TabOrder FROM {objectQualifier}Tabs WHERE TabID = @TabId)
		
		IF (@OldParentId <> @NewParentId OR NOT (@OldParentId IS NULL AND @NewParentId IS NULL))
			-- Parent has changed
			BEGIN
				-- update TabOrder of Tabs with same original Parent
				UPDATE {objectQualifier}Tabs
					SET TabOrder = TabOrder - 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder

				-- Get TabOrder of AfterTab
				SET @TabOrder = (SELECT TabOrder FROM {objectQualifier}Tabs WHERE TabID = @BeforeTabId)
						
				-- update TabOrder of Tabs with same new Parent
				UPDATE {objectQualifier}Tabs
					SET TabOrder = TabOrder + 2
					WHERE (ParentId = @NewParentId OR (ParentId IS NULL AND @NewParentId IS NULL)) 
						AND TabOrder >= @TabOrder

				-- Update Tab with new TabOrder
				UPDATE {objectQualifier}Tabs
					SET 
						ParentId				= @NewParentId,
						TabOrder				= @TabOrder,
						LastModifiedByUserID	= @LastModifiedByUserID,
						LastModifiedOnDate		= getdate()					
					WHERE TabID = @TabId
				
			END
		ELSE
			-- Parent has not changed
			BEGIN
				-- Remove Tab from TabOrder
				UPDATE {objectQualifier}Tabs
					SET TabOrder = -1
					WHERE TabID = @TabId
					
				-- Reorder
				UPDATE {objectQualifier}Tabs
					SET TabOrder = TabOrder - 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder
						AND TabId <> @TabId
						
				-- Get TabOrder of BeforeTab
				SET @TabOrder = (SELECT TabOrder FROM {objectQualifier}Tabs WHERE TabID = @BeforeTabId)
										
				-- Reorder					
				UPDATE {objectQualifier}Tabs
					SET TabOrder = TabOrder + 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder >= @TabOrder

				-- Update Tab with new TabOrder
				UPDATE {objectQualifier}Tabs
					SET 
						TabOrder				= @TabOrder,
						LastModifiedByUserID	= @LastModifiedByUserID,
						LastModifiedOnDate		= getdate()					
					WHERE TabID = @TabId
			END			
	END

GO

/* Add MoveTabToParent Procedure */
/*********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}MoveTabToParent]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}MoveTabToParent]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}MoveTabToParent] 
	@TabId					int,
	@NewParentId			int,
	@LastModifiedByUserID	int
AS
	BEGIN
		DECLARE @OldParentId int
		SET @OldParentId = (SELECT ParentId FROM {objectQualifier}Tabs WHERE TabID = @TabId)
		
		DECLARE @TabOrder int
		SET @TabOrder = (SELECT TabOrder FROM {objectQualifier}Tabs WHERE TabID = @TabId)
		
		-- Get New TabOrder
		DECLARE @NewTabOrder int
		SET @NewTabOrder = (SELECT MAX(TabOrder) FROM {objectQualifier}Tabs WHERE (ParentId = @NewParentId OR (ParentId IS NULL AND @NewParentId IS NULL)))
		IF @NewTabOrder IS NULL 
			SET @NewTabOrder = 1
		ELSE
			SET @NewTabOrder = @NewTabOrder + 2			
				
		BEGIN
			-- update TabOrder of Tabs with same original Parent
			UPDATE {objectQualifier}Tabs
				SET TabOrder = TabOrder - 2
				WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
					AND TabOrder > @TabOrder

			-- Update Tab with new TabOrder
			UPDATE {objectQualifier}Tabs
				SET 
					ParentId				= @NewParentId,
					TabOrder				= @NewTabOrder,
					LastModifiedByUserID	= @LastModifiedByUserID,
					LastModifiedOnDate		= getdate()					
				WHERE TabID = @TabId
		END
	END
GO

/* Update UpdateTab Procedure */
/******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateTab]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateTab]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTab] 
    @TabId					int,
    @ContentItemID			int,
    @PortalId				int,
    @VersionGuid			uniqueidentifier,
    @DefaultLanguageGuid	uniqueidentifier,
    @LocalizedVersionGuid	uniqueidentifier,
    @TabName				nvarchar(50),
    @IsVisible				bit,
    @DisableLink			bit,
    @ParentId				int,
    @IconFile				nvarchar(100),
    @IconFileLarge			nvarchar(100),
    @Title					nvarchar(200),
    @Description			nvarchar(500),
    @KeyWords				nvarchar(500),
    @IsDeleted				bit,
    @Url					nvarchar(255),
    @SkinSrc				nvarchar(200),
    @ContainerSrc			nvarchar(200),
    @StartDate				datetime,
    @EndDate				datetime,
    @RefreshInterval		int,
    @PageHeadText			nvarchar(500),
    @IsSecure				bit,
    @PermanentRedirect		bit,
    @SiteMapPriority		float,
    @LastModifiedByUserID	int,
    @CultureCode			nvarchar(50)

AS
	BEGIN
		DECLARE @OldParentId int
		SET @OldParentId = (SELECT ParentId FROM {objectQualifier}Tabs WHERE TabID = @TabId)

		DECLARE @TabOrder int
		SET @TabOrder = (SELECT TabOrder FROM {objectQualifier}Tabs WHERE TabID = @TabId)
				
		-- Get New TabOrder
		DECLARE @NewTabOrder int
		SET @NewTabOrder = (SELECT MAX(TabOrder) FROM {objectQualifier}Tabs WHERE (ParentId = @ParentId OR (ParentId IS NULL AND @ParentId IS NULL)))
		IF @NewTabOrder IS NULL 
			SET @NewTabOrder = 1
		ELSE
			SET @NewTabOrder = @NewTabOrder + 2
		
		UPDATE {objectQualifier}Tabs
			SET
				ContentItemID			= @ContentItemID,
				PortalId				= @PortalId,
				VersionGuid				= @VersionGuid,
				DefaultLanguageGuid		= @DefaultLanguageGuid,
				LocalizedVersionGuid	= @LocalizedVersionGuid,
				TabName					= @TabName,
				IsVisible				= @IsVisible,
				DisableLink				= @DisableLink,
				ParentId				= @ParentId,
				IconFile				= @IconFile,
				IconFileLarge			= @IconFileLarge,
				Title					= @Title,
				Description				= @Description,
				KeyWords				= @KeyWords,
				IsDeleted				= @IsDeleted,
				Url						= @Url,
				SkinSrc					= @SkinSrc,
				ContainerSrc			= @ContainerSrc,
				StartDate				= @StartDate,
				EndDate					= @EndDate,
				RefreshInterval			= @RefreshInterval,
				PageHeadText			= @PageHeadText,
				IsSecure				= @IsSecure,
				PermanentRedirect		= @PermanentRedirect,
				SiteMapPriority			= @SiteMapPriority,
				LastModifiedByUserID	= @LastModifiedByUserID,
				LastModifiedOnDate		= getdate(),
				CultureCode				= @CultureCode
		WHERE  TabId = @TabId
		
		IF (@OldParentId <> @ParentId OR NOT (@OldParentId IS NULL AND @ParentId IS NULL))
			BEGIN
				-- update TabOrder of Tabs with same original Parent
				UPDATE {objectQualifier}Tabs
					SET TabOrder = TabOrder - 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder

				-- Update Tab with new TabOrder
				UPDATE {objectQualifier}Tabs
					SET 
						TabOrder = @NewTabOrder
					WHERE TabID = @TabId
			END
    END
GO

/* Update LocalizeTab Procedure */
/********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}LocalizeTab]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}LocalizeTab]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}LocalizeTab] 
	@TabId					int,
	@CultureCode			nvarchar(10),
	@LastModifiedByUserID	int
AS
	BEGIN
		UPDATE {objectQualifier}Tabs
			SET 
				CultureCode				= @CultureCode,
				LastModifiedByUserID	= @LastModifiedByUserID,
				LastModifiedOnDate		= getdate()					
			WHERE TabID = @TabId
			
		UPDATE {objectQualifier}TabModules
			SET 
				CultureCode				= @CultureCode,
				LastModifiedByUserID	= @LastModifiedByUserID,
				LastModifiedOnDate		= getdate()					
			WHERE TabID = @TabId
	END
GO

--Schema creation for Social Relationship
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}RelationshipTypes]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}RelationshipTypes]
		(
			[RelationshipTypeID] [int] IDENTITY(1,1) NOT NULL,
			[Direction] [int] NOT NULL,
			[Name] [nvarchar](50) NOT NULL,
			[Description] [nvarchar](500) NULL,
			[CreatedByUserID] [int] NOT NULL,
			[CreatedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}RelationshipTypes_CreatedOnDate]  DEFAULT (getdate()) NOT NULL ,
			[LastModifiedByUserID] [int] NOT NULL,
			[LastModifiedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}RelationshipTypes_LastModifiedOnDate]  DEFAULT (getdate()) NOT NULL,
			CONSTRAINT [PK_{objectQualifier}RelationshipTypes] PRIMARY KEY CLUSTERED ( [RelationshipTypeID] ASC )
		)		
	END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Relationships]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}Relationships]
		(
			[RelationshipID] [int] IDENTITY(1,1) NOT NULL,
			[RelationshipTypeID] [int] NOT NULL,
			[Name] [nvarchar](50) NOT NULL,
			[Description] [nvarchar](500) NULL,			
			[PortalID] [int] NULL,
			[UserID] [int] NULL,
			[DefaultResponse] [int] NOT NULL,
			[CreatedByUserID] [int] NOT NULL,
			[CreatedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}Relationships_CreatedOnDate]  DEFAULT (getdate()) NOT NULL ,
			[LastModifiedByUserID] [int] NOT NULL,
			[LastModifiedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}Relationships_LastModifiedOnDate]  DEFAULT (getdate()) NOT NULL,
			CONSTRAINT [PK_{objectQualifier}Relationships] PRIMARY KEY CLUSTERED ( [RelationshipID] ASC )
		)		

		CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Relationships_UserID] ON {databaseOwner}[{objectQualifier}Relationships] ([UserID] ASC)		
	
		ALTER TABLE {databaseOwner}[{objectQualifier}Relationships]  
			ADD CONSTRAINT [FK_{objectQualifier}Relationships_{objectQualifier}Portals] FOREIGN KEY([PortalID]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID]) ON DELETE CASCADE		
		ALTER TABLE {databaseOwner}[{objectQualifier}Relationships]  
			ADD CONSTRAINT [FK_{objectQualifier}Relationships_{objectQualifier}Users] FOREIGN KEY([UserID]) REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) ON DELETE CASCADE			
		ALTER TABLE {databaseOwner}[{objectQualifier}Relationships]  
			ADD CONSTRAINT [FK_{objectQualifier}Relationships_{objectQualifier}RelationshipTypes] FOREIGN KEY([RelationshipTypeID]) REFERENCES {databaseOwner}[{objectQualifier}RelationshipTypes] ([RelationshipTypeID]) ON DELETE CASCADE			
	END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UserRelationships]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}UserRelationships]
		(
			[UserRelationshipID] [int] IDENTITY(1,1) NOT NULL,
			[UserID] [int] NOT NULL,
			[RelatedUserID] [int] NOT NULL,
			[RelationshipID] [int] NOT NULL,
			[Status] [int] NOT NULL,
			[CreatedByUserID] [int] NOT NULL,
			[CreatedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}UserRelationships_CreatedOnDate]  DEFAULT (getdate()) NOT NULL ,
			[LastModifiedByUserID] [int] NOT NULL,
			[LastModifiedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}UserRelationships_LastModifiedOnDate]  DEFAULT (getdate()) NOT NULL,
			CONSTRAINT [PK_{objectQualifier}UserRelationships] PRIMARY KEY CLUSTERED ( [UserRelationshipID] ASC )
		)		

		CREATE UNIQUE NONCLUSTERED INDEX [IX_{objectQualifier}UserRelationships_UserID_RelatedUserID_RelationshipID] ON {databaseOwner}[{objectQualifier}UserRelationships] ([UserID] ASC, [RelatedUserID] ASC, [RelationshipID] ASC)
		CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UserRelationships_UserID] ON {databaseOwner}[{objectQualifier}UserRelationships] ([UserID] ASC)
		CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UserRelationships_RelatedUserID] ON {databaseOwner}[{objectQualifier}UserRelationships] ([RelatedUserID] ASC)
		
		ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationships]  
			ADD CONSTRAINT [FK_{objectQualifier}UserRelationships_{objectQualifier}Relationships] FOREIGN KEY([RelationshipID]) REFERENCES {databaseOwner}[{objectQualifier}Relationships] ([RelationshipID]) ON DELETE CASCADE		
		ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationships]
			ADD CONSTRAINT [FK_{objectQualifier}UserRelationships_{objectQualifier}Users] FOREIGN KEY([UserID]) REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) 
		ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationships]			
			ADD CONSTRAINT [FK_{objectQualifier}UserRelationships_{objectQualifier}Users_OnRelatedUser] FOREIGN KEY([RelationshipID]) REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) 
	END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UserRelationshipPreferences]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}UserRelationshipPreferences]
		(		
			[PreferenceID] [int] IDENTITY(1,1) NOT NULL,	
			[UserID] [int] NOT NULL,
			[RelationshipID] [int] NOT NULL,
			[DefaultResponse] [int] NOT NULL,
			[CreatedByUserID] [int] NOT NULL,
			[CreatedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}UserRelationshipPreferences_CreatedOnDate]  DEFAULT (getdate()) NOT NULL ,
			[LastModifiedByUserID] [int] NOT NULL,
			[LastModifiedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}UserRelationshipPreferences_LastModifiedOnDate]  DEFAULT (getdate()) NOT NULL,
			CONSTRAINT [PK_{objectQualifier}UserRelationshipPreferences] PRIMARY KEY CLUSTERED ( [PreferenceID] ASC, [RelationshipID] ASC )
		)				
		
		ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationshipPreferences]  
			ADD CONSTRAINT [FK_{objectQualifier}UserRelationshipPreferences_{objectQualifier}Relationships] FOREIGN KEY([RelationshipID]) REFERENCES {databaseOwner}[{objectQualifier}Relationships] ([RelationshipID]) ON DELETE CASCADE		
		ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationshipPreferences]
			ADD CONSTRAINT [FK_{objectQualifier}UserRelationshipPreferences_{objectQualifier}Users] FOREIGN KEY([UserID]) REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) 
	END
GO

-- Add rows to {databaseOwner}[{objectQualifier}RelationshipTypes
IF NOT EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}RelationshipTypes] WHERE [Name] = N'Friends')
    BEGIN
	    INSERT INTO {databaseOwner}[{objectQualifier}RelationshipTypes] ([Direction], [Name], [Description],[CreatedByUserID],[LastModifiedByUserID]) VALUES (2, N'Friends', N'Friends',-1,-1)
	END
GO
IF NOT EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}RelationshipTypes] WHERE [Name] = N'Followers')
    BEGIN
	    INSERT INTO {databaseOwner}[{objectQualifier}RelationshipTypes] ([Direction], [Name], [Description],[CreatedByUserID],[LastModifiedByUserID]) VALUES (1, N'Followers', N'Followers',-1,-1)
	END
GO

--CRUD SPs for RelationshipType
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetAllRelationshipTypes]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetAllRelationshipTypes]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAllRelationshipTypes]
AS 
    SELECT  RelationshipTypeID,
            Direction,
            Name ,            
            Description,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}RelationshipTypes    
	ORDER BY RelationshipTypeID ASC
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetRelationshipType]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetRelationshipType]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRelationshipType] @RelationshipTypeID INT
AS 
    SELECT  RelationshipTypeID,
            Direction,
            Name ,            
            Description,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}RelationshipTypes    
	WHERE RelationshipTypeID = @RelationshipTypeID
	ORDER BY RelationshipTypeID ASC    
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteRelationshipType]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteRelationshipType]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteRelationshipType] @RelationshipTypeID INT	
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}RelationshipTypes  
			WHERE RelationshipTypeID = @RelationshipTypeID
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveRelationshipType]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveRelationshipType]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveRelationshipType]
    @RelationshipTypeID INT ,
    @Direction INT ,
    @Name NVARCHAR(50) ,
    @Description NVARCHAR(500) ,
    @UserID INT
AS 
    IF ( @RelationshipTypeID = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}RelationshipTypes
                    ( Direction,
                      Name ,            
                      Description,					
                      CreatedByUserID ,
                      CreatedOnDate ,
                      LastModifiedByUserID ,
                      LastModifiedOnDate
			        
                    )
            VALUES  ( @Direction , --  @Direction INT 
                      @Name , -- Name - nvarchar(50)
                      @Description , -- @Description NVARCHAR(500)
                      @UserID , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @UserID , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime
			        
                    )
                    
            SELECT  @RelationshipTypeID = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}RelationshipTypes
            SET     Name = @Name ,
                    Direction = @Direction ,
                    Description = @Description ,
                    LastModifiedByUserID = @UserID ,
                    LastModifiedOnDate = GETDATE()
            WHERE   RelationshipTypeID = @RelationshipTypeID
        END
        
    SELECT  @RelationshipTypeID
GO

--CRUD SPs for Relationships

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetRelationship]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetRelationship]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRelationship] @RelationshipID INT
AS 
    SELECT  RelationshipID,
            RelationshipTypeID,            
            Name,            
            Description,
            UserID,
            PortalID,
            DefaultResponse,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}Relationships    
	WHERE RelationshipID = @RelationshipID
	ORDER BY RelationshipID ASC    
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetRelationshipsByUserID]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetRelationshipsByUserID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRelationshipsByUserID] @UserID INT
AS 
    SELECT  RelationshipID,
			RelationshipTypeID,            
            Name,            
            Description,
			UserID,
			PortalID,
			DefaultResponse,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}Relationships    
	WHERE UserID = @UserID
	ORDER BY RelationshipID ASC    
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetRelationshipsByPortalID]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetRelationshipsByPortalID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRelationshipsByPortalID] @PortalID INT
AS 
    SELECT  RelationshipID,
			RelationshipTypeID,            
            Name,            
            Description,
			UserID,
			PortalID,
			DefaultResponse,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}Relationships    
	WHERE PortalID = @PortalID AND UserID IS NULL
	ORDER BY RelationshipID ASC    
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteRelationship]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteRelationship]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteRelationship] @RelationshipID INT	
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}Relationships  
			WHERE RelationshipID = @RelationshipID
	END
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveRelationship]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveRelationship]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveRelationship]
    @RelationshipID INT,
    @RelationshipTypeID INT,    
    @Name NVARCHAR(50),
    @Description NVARCHAR(500),
	@UserID INT,
	@PortalID INT,
	@DefaultResponse INT,
	@CreateUpdateUserID INT
    
AS 
    IF ( @RelationshipID = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}Relationships
                    ( RelationshipTypeID,
                      Name ,            
                      Description,					
					  UserID,
					  PortalID,		
					  DefaultResponse,			
                      CreatedByUserID ,
                      CreatedOnDate ,
                      LastModifiedByUserID ,
                      LastModifiedOnDate
			        
                    )
            VALUES  ( @RelationshipTypeID , -- @RelationshipTypeID INT
                      @Name , -- Name - nvarchar(50)
                      @Description , -- @Description NVARCHAR(500)
					  @UserID , -- @UserID int
					  @PortalID , -- @PortalID int
					  @DefaultResponse, -- @DefaultResponse int
                      @CreateUpdateUserID , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @CreateUpdateUserID , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime
			        
                    )
                    
            SELECT  @RelationshipID = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}Relationships
            SET     Name = @Name ,                    
                    Description = @Description,
					RelationshipTypeID = @RelationshipTypeID,
					UserID = @UserID,
					PortalID = @PortalID,
					DefaultResponse = @DefaultResponse,
                    LastModifiedByUserID = @CreateUpdateUserID,
                    LastModifiedOnDate = GETDATE()
            WHERE   RelationshipID = @RelationshipID
        END
        
    SELECT  @RelationshipID
GO

--CRUD SPs for UserRelationships

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserRelationship]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationship]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationship] @UserRelationshipID INT
AS 
    SELECT  UserRelationshipID,
			UserID,
			RelatedUserID,
			RelationshipID,            
			Status,            
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}UserRelationships    
	WHERE UserRelationshipID = @UserRelationshipID
	ORDER BY UserRelationshipID ASC    
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserRelationshipsByMultipleIDs]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipsByMultipleIDs]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipsByMultipleIDs] 
	@UserID INT,
	@RelatedUserID INT,
	@RelationshipID INT,
	@Direction INT
AS 
	IF ( @Direction = 1 ) --OneWay
	  BEGIN
		SELECT  UserRelationshipID,
				UserID,
				RelatedUserID,
				RelationshipID,            
				Status,            
				CreatedByUserID ,
				CreatedOnDate ,
				LastModifiedByUserID ,
				LastModifiedOnDate
		FROM    {databaseOwner}{objectQualifier}UserRelationships    
		WHERE UserID = @UserID
		AND   RelatedUserID = @RelatedUserID
		AND   RelationshipID = @RelationshipID
		ORDER BY UserRelationshipID ASC    
	  END
	  ELSE IF ( @Direction = 2 ) --TwoWay
	  BEGIN
		SELECT  UserRelationshipID,
				UserID,
				RelatedUserID,
				RelationshipID,            
				Status,            
				CreatedByUserID ,
				CreatedOnDate ,
				LastModifiedByUserID ,
				LastModifiedOnDate
		FROM    {databaseOwner}{objectQualifier}UserRelationships    		
		WHERE (  (UserID = @UserID AND RelatedUserID = @RelatedUserID) 
			  OR (RelatedUserID = @UserID AND UserID = @RelatedUserID) --swap userids and check
			  )
		AND   RelationshipID = @RelationshipID
		ORDER BY UserRelationshipID ASC    
	  END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteUserRelationship]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserRelationship]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserRelationship] @UserRelationshipID INT	
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}UserRelationships  
			WHERE UserRelationshipID = @UserRelationshipID
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveUserRelationship]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveUserRelationship]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveUserRelationship]
    @UserRelationshipID INT,
	@UserID INT,
	@RelatedUserID INT,
	@RelationshipID INT,
	@Status INT,
	@CreateUpdateUserID INT
    
AS 
    IF ( @UserRelationshipID = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}UserRelationships
                    ( UserID,
					  RelatedUserID,					
					  RelationshipID,
					  Status,
                      CreatedByUserID ,
                      CreatedOnDate ,
                      LastModifiedByUserID ,
                      LastModifiedOnDate
			        
                    )
            VALUES  ( @UserID , -- @UserID int
					  @RelatedUserID , -- @RelatedUserlID int
					  @RelationshipID, -- @RelationshipID int
					  @Status , -- @Status int
                      @CreateUpdateUserID , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @CreateUpdateUserID , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime
			        
                    )
                    
            SELECT  @RelationshipID = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}UserRelationships
            SET     UserID = @UserID,
					RelatedUserID = @RelatedUserID,
					RelationshipID = @RelationshipID,
					Status = @Status,
                    LastModifiedByUserID = @CreateUpdateUserID,
                    LastModifiedOnDate = GETDATE()
            WHERE   UserRelationshipID = @UserRelationshipID
        END
        
    SELECT  @UserRelationshipID
GO

--CRUD SPs for UserRelationshipPreferences

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserRelationshipPreferenceByID]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipPreferenceByID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipPreferenceByID] 
	@PreferenceID INT	
AS 
    SELECT  PreferenceID,
			UserID,
			RelationshipID,            
			DefaultResponse,            
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}UserRelationshipPreferences    
	WHERE @PreferenceID = @PreferenceID	  
	ORDER BY PreferenceID ASC
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserRelationshipPreference]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipPreference]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipPreference] 
	@UserID INT,
	@RelationshipID INT
AS 
    SELECT  PreferenceID,
			UserID,
			RelationshipID,            
			DefaultResponse,            
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}UserRelationshipPreferences    
	WHERE UserID = @UserID
	  AND RelationshipID = @RelationshipID
	ORDER BY UserID ASC, RelationshipID ASC
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteUserRelationshipPreference]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserRelationshipPreference]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserRelationshipPreference]
	@PreferenceID INT	
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}UserRelationshipPreferences  
		WHERE PreferenceID = @PreferenceID

	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveUserRelationshipPreference]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveUserRelationshipPreference]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveUserRelationshipPreference]
    @PreferenceID INT,
	@UserID INT,	
	@RelationshipID INT,
	@DefaultResponse INT,
	@CreateUpdateUserID INT
    
AS 
    IF ( @PreferenceID = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}UserRelationshipPreferences
                    ( UserID,					  
					  RelationshipID,
					  DefaultResponse,
                      CreatedByUserID ,
                      CreatedOnDate ,
                      LastModifiedByUserID ,
                      LastModifiedOnDate
			        
                    )
            VALUES  ( @UserID , -- @UserID int					  
					  @RelationshipID, -- @RelationshipID int
					  @DefaultResponse , -- @DefaultResponse int
                      @CreateUpdateUserID , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @CreateUpdateUserID , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime
			        
                    )
                    
            SELECT  @PreferenceID = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}UserRelationshipPreferences
            SET     UserID = @UserID,					
					RelationshipID = @RelationshipID,
					DefaultResponse = @DefaultResponse,
                    LastModifiedByUserID = @CreateUpdateUserID,
                    LastModifiedOnDate = GETDATE()
            WHERE   PreferenceID = @PreferenceID
        END
        
    SELECT  @PreferenceID
        
GO

/* Add ReadOnly Column To ProfilePropertyDefinition Table */
/**********************************************************/

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME='{objectQualifier}ProfilePropertyDefinition' AND COLUMN_NAME='ReadOnly')
	BEGIN
		-- Add new Column
		ALTER TABLE {databaseOwner}{objectQualifier}ProfilePropertyDefinition
			ADD ReadOnly bit CONSTRAINT [DF_{objectQualifier}ProfilePropertyDefinition_ReadOnly]  DEFAULT (0) NOT NULL
	END
GO

/* Update AddPropertyDefinition Procedure */
/******************************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddPropertyDefinition]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddPropertyDefinition]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddPropertyDefinition]
	@PortalId int,
	@ModuleDefId int,
	@DataType int,
	@DefaultValue ntext,
	@PropertyCategory nvarchar(50),
	@PropertyName nvarchar(50),
	@ReadOnly bit,
	@Required bit,
	@ValidationExpression nvarchar(2000),
	@ViewOrder int,
	@Visible bit,
    @Length int,
    @DefaultVisibility int,
	@CreatedByUserID int

AS
	DECLARE @PropertyDefinitionId int

	SELECT @PropertyDefinitionId = PropertyDefinitionId
		FROM   {databaseOwner}{objectQualifier}ProfilePropertyDefinition
		WHERE  (PortalId = @PortalId OR (PortalId IS NULL AND @PortalId IS NULL))
			AND PropertyName = @PropertyName
			
	IF @vieworder=-1
		BEGIN
			SELECT	@vieworder = MAX(ViewOrder) + 1 
			FROM	{databaseOwner}{objectQualifier}ProfilePropertyDefinition
		END

	IF @PropertyDefinitionId IS NULL
		BEGIN
			INSERT {databaseOwner}{objectQualifier}ProfilePropertyDefinition	(
					PortalId,
					ModuleDefId,
					Deleted,
					DataType,
					DefaultValue,
					PropertyCategory,
					PropertyName,
					ReadOnly,
					Required,
					ValidationExpression,
					ViewOrder,
					Visible,
					Length,
                    DefaultVisibility,
					[CreatedByUserID],
					[CreatedOnDate],
					[LastModifiedByUserID],
					[LastModifiedOnDate]

				)
				VALUES	(
					@PortalId,
					@ModuleDefId,
					0,
					@DataType,
					@DefaultValue,
					@PropertyCategory,
					@PropertyName,
					@ReadOnly,
					@Required,
					@ValidationExpression,
					@ViewOrder,
					@Visible,
					@Length,
                    @DefaultVisibility,
					@CreatedByUserID,
  					getdate(),
  					@CreatedByUserID,
  					getdate()
				)

			SELECT @PropertyDefinitionId = SCOPE_IDENTITY()
		END
	ELSE
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}ProfilePropertyDefinition 
				SET DataType = @DataType,
					ModuleDefId = @ModuleDefId,
					DefaultValue = @DefaultValue,
					PropertyCategory = @PropertyCategory,
					ReadOnly = @ReadOnly,
					Required = @Required,
					ValidationExpression = @ValidationExpression,
					ViewOrder = @ViewOrder,
					Deleted = 0,
					Visible = @Visible,
					Length = @Length,
                    DefaultVisibility = @DefaultVisibility,
					[LastModifiedByUserID] = @CreatedByUserID,	
					[LastModifiedOnDate] = getdate()
				WHERE PropertyDefinitionId = @PropertyDefinitionId
		END
		
	SELECT @PropertyDefinitionId
GO

/* Update UpdatePropertyDefinition Procedure */
/*********************************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdatePropertyDefinition]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdatePropertyDefinition]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdatePropertyDefinition]
	@PropertyDefinitionId int,
	@DataType int,
	@DefaultValue nvarchar(50),
	@PropertyCategory nvarchar(50),
	@PropertyName nvarchar(50),
	@ReadOnly bit,
	@Required bit,
	@ValidationExpression nvarchar(100),
	@ViewOrder int,
	@Visible bit,
    @Length int,
    @DefaultVisibility int,
	@LastModifiedByUserID	int

AS
	UPDATE {databaseOwner}{objectQualifier}ProfilePropertyDefinition 
		SET DataType = @DataType,
			DefaultValue = @DefaultValue,
			PropertyCategory = @PropertyCategory,
			PropertyName = @PropertyName,
			ReadOnly = @ReadOnly,
			Required = @Required,
			ValidationExpression = @ValidationExpression,
			ViewOrder = @ViewOrder,
			Visible = @Visible,
			Length = @Length,
            DefaultVisibility = @DefaultVisibility,
			[LastModifiedByUserID] = @LastModifiedByUserID,	
			[LastModifiedOnDate] = getdate()
		WHERE PropertyDefinitionId = @PropertyDefinitionId
GO

/* Add objects for social messaging */
/*************************************/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Social_Messages]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Social_Messages(
	[MessageID] [int] IDENTITY(1,1) NOT NULL,
	[To] [nvarchar](2000) NULL,
	[From] [nvarchar](200) NULL,
	[Subject] [nvarchar](400) NULL,
	[Body] [ntext] NULL,
	[ParentMessageID] [int] NULL,
	[ReplyAllAllowed] [bit] NULL,
	[SenderUserID] [int] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}Social_Messages] PRIMARY KEY CLUSTERED 
	(
		[MessageID] ASC
	)
)

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Social_Messages_SenderUserID] ON {databaseOwner}[{objectQualifier}Social_Messages] ([SenderUserID] ASC, [CreatedOnDate] DESC)		

END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Social_MessageRecipients]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Social_MessageRecipients(
	[RecipientID] [int] IDENTITY(1,1) NOT NULL,
	[MessageID] [int] NOT NULL,
	[UserID] [int] NULL,
	[Status] [tinyint] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}Social_MessageRecipients] PRIMARY KEY CLUSTERED 
	(
		[RecipientID] ASC
	)
)

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Social_MessageRecipients_UserID] ON {databaseOwner}[{objectQualifier}Social_MessageRecipients] ([UserID] ASC, [CreatedOnDate] DESC)		

ALTER TABLE {databaseOwner}[{objectQualifier}Social_MessageRecipients]  
	ADD CONSTRAINT [FK_{objectQualifier}Social_MessageRecipients_{objectQualifier}Social_Messages] FOREIGN KEY([MessageID]) REFERENCES {databaseOwner}[{objectQualifier}Social_Messages] ([MessageID]) ON DELETE CASCADE

END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Social_MessageAttachments]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}Social_MessageAttachments(
	[MessageAttachmentID] [int] IDENTITY(1,1) NOT NULL,
	[MessageID] [int] NOT NULL,
	[FileID] [int] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}Social_MessageAttachments] PRIMARY KEY CLUSTERED 
	(
		[MessageAttachmentID] ASC
	)
)

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Social_MessageAttachments_MessageID] ON {databaseOwner}[{objectQualifier}Social_MessageAttachments] ([MessageID] ASC)		

ALTER TABLE {databaseOwner}[{objectQualifier}Social_MessageAttachments]  
	ADD CONSTRAINT [FK_{objectQualifier}Social_MessageAttachments_{objectQualifier}Social_Messages] FOREIGN KEY([MessageID]) REFERENCES {databaseOwner}[{objectQualifier}Social_Messages] ([MessageID]) ON DELETE CASCADE

END

GO

--CRUD for Social_Messages

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveSocialMessage]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveSocialMessage]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveSocialMessage]
    @MessageID INT,
	@To nvarchar(2000),
	@From nvarchar(200),
    @Subject nvarchar(400),
    @Body ntext,
    @ParentMessageID int,
    @ReplyAllAllowed bit,
    @SenderUserID int,
	@CreateUpdateUserID INT
    
AS 
    IF ( @MessageID = -1 ) 
        BEGIN
            INSERT {databaseOwner}{objectQualifier}Social_Messages(                    
  					[To],
					[From],					
					[Subject],
					[Body],
					[ParentMessageID],
					[ReplyAllAllowed],
					[SenderUserID],
                    [CreatedByUserID],
                    [CreatedOnDate],
                    [LastModifiedByUserID],
                    [LastModifiedOnDate]			        
                    )
            VALUES  (       
     			    @To,
					@From,
				    @Subject,			
					@Body,
					@ParentMessageID,
					@ReplyAllAllowed,
					@SenderUserID,
                    @CreateUpdateUserID , -- CreatedBy - int
                    GETDATE() , -- CreatedOn - datetime
                    @CreateUpdateUserID , -- LastModifiedBy - int
                    GETDATE() -- LastModifiedOn - datetime			        
                    )
                    
            SELECT  @MessageID = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}Social_Messages
            SET     [To] = @To,
					[From] = @From,
					[Subject] = @Subject,			
					[Body] = @Body,
					[ParentMessageID] = @ParentMessageID,
					[ReplyAllAllowed] = @ReplyAllAllowed,
					[SenderUserID] = SenderUserID,
                    LastModifiedByUserID = @CreateUpdateUserID,
                    LastModifiedOnDate = GETDATE()
            WHERE   MessageID = @MessageID
        END
        
    SELECT  @MessageID
        
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetSocialMessage]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSocialMessage]
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSocialMessage]
    @MessageID INT
AS 
	SELECT [MessageID], [To], [From], [Subject], [Body], [ParentMessageID], [ReplyAllAllowed], [SenderUserID], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate] 
	FROM   {databaseOwner}{objectQualifier}[Social_Messages] 
	WHERE  [MessageID] = @MessageID 

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetSocialMessagesBySender]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSocialMessagesBySender]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSocialMessagesBySender]
    @SenderUserID INT
AS 
	SELECT [MessageID], [To], [From], [Subject], [Body], [ParentMessageID], [ReplyAllAllowed], [SenderUserID], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate] 
	FROM   {databaseOwner}{objectQualifier}[Social_Messages] 
	WHERE  [SenderUserID] = @SenderUserID 

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteSocialMessage]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteSocialMessage]
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteSocialMessage]    
	@MessageID int
AS 
	DELETE FROM {databaseOwner}{objectQualifier}Social_Messages
	WHERE  [MessageID] = @MessageID
GO

--CRUD for Social_MessageRecipients

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveSocialMessageRecipient]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveSocialMessageRecipient]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveSocialMessageRecipient]
    @RecipientID int,
    @MessageID int,
    @UserID int,
    @Status tinyint,
	@CreateUpdateUserID INT    
AS 
    IF ( @RecipientID = -1 ) 
        BEGIN
            INSERT {databaseOwner}{objectQualifier}Social_MessageRecipients(                    
					[MessageID],
					[UserID],
					[Status],	
                    [CreatedByUserID],
                    [CreatedOnDate],
                    [LastModifiedByUserID],
                    [LastModifiedOnDate]			        												        
                    )
            VALUES  (       
					@MessageID,
					@UserID,
					@Status,            
                    @CreateUpdateUserID , -- CreatedBy - int
                    GETDATE() , -- CreatedOn - datetime
                    @CreateUpdateUserID , -- LastModifiedBy - int
                    GETDATE() -- LastModifiedOn - datetime			        
                    )
                    
            SELECT  @RecipientID = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}Social_MessageRecipients
            SET     [MessageID] = @MessageID,
					[UserID] = @UserID,
                    LastModifiedByUserID = @CreateUpdateUserID,
                    LastModifiedOnDate = GETDATE()
            WHERE   RecipientID = @RecipientID
        END
        
    SELECT  @RecipientID        
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CreateSocialMessageRecipientsForRole]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CreateSocialMessageRecipientsForRole]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CreateSocialMessageRecipientsForRole]    
    @MessageID int,
    @RoleID int,
    @Status tinyint,
	@CreateUpdateUserID INT    
AS 
    INSERT {databaseOwner}{objectQualifier}Social_MessageRecipients(                    
			[MessageID],
			[UserID],
			[Status],	
            [CreatedByUserID],
            [CreatedOnDate],
            [LastModifiedByUserID],
            [LastModifiedOnDate]			        												        
            )            
			SELECT 
			  @MessageID, 	
			  UserID,
			  @Status,            
              @CreateUpdateUserID , -- CreatedBy - int
              GETDATE() , -- CreatedOn - datetime
              @CreateUpdateUserID , -- LastModifiedBy - int
              GETDATE() -- LastModifiedOn - datetime			                                                
           FROM {databaseOwner}{objectQualifier}vw_UserRoles
		   WHERE RoleID = @RoleID    		               
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetSocialMessageRecipient]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSocialMessageRecipient]
GO

CREATE PROC {databaseOwner}[{objectQualifier}GetSocialMessageRecipient] 
    @RecipientID INT
AS 
	SELECT [RecipientID], [MessageID], [UserID], [Status], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate] 
	FROM   {databaseOwner}{objectQualifier}Social_MessageRecipients
	WHERE  [RecipientID] = @RecipientID 

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetSocialMessageRecipientsByUser]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSocialMessageRecipientsByUser]
GO

CREATE PROC {databaseOwner}[{objectQualifier}GetSocialMessageRecipientsByUser] 
    @UserID INT
AS 
	SELECT [RecipientID], [MessageID], [UserID], [Status], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate] 
	FROM   {databaseOwner}{objectQualifier}Social_MessageRecipients
	WHERE  [UserID] = @UserID 

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetSocialMessageRecipientsByMessage]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSocialMessageRecipientsByMessage]
GO

CREATE PROC {databaseOwner}[{objectQualifier}GetSocialMessageRecipientsByMessage] 
    @MessageID INT
AS 
	SELECT [RecipientID], [MessageID], [UserID], [Status], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate] 
	FROM   {databaseOwner}{objectQualifier}Social_MessageRecipients
	WHERE  [MessageID] = @MessageID 

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteSocialMessageRecipient]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteSocialMessageRecipient]
GO

CREATE PROC {databaseOwner}[{objectQualifier}DeleteSocialMessageRecipient] 
    @RecipientID int
AS 
	DELETE FROM {databaseOwner}{objectQualifier}Social_MessageRecipients
	WHERE  [RecipientID] = @RecipientID
GO

--CRUD for Social_MessageAttachments

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveSocialMessageAttachment]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveSocialMessageAttachment]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveSocialMessageAttachment]
    @MessageAttachmentID int,
    @MessageID int,
    @FileID int,  
	@CreateUpdateUserID INT
    
AS 
    IF ( @MessageAttachmentID = -1 ) 
        BEGIN
            INSERT {databaseOwner}{objectQualifier}Social_MessageAttachments(                    
					[FileID],
					[MessageID],
                    [CreatedByUserID],
                    [CreatedOnDate],
                    [LastModifiedByUserID],
                    [LastModifiedOnDate]			        												        											        
                    )
            VALUES  (       
					@FileID,
					@MessageID,
                    @CreateUpdateUserID , -- CreatedBy - int
                    GETDATE() , -- CreatedOn - datetime
                    @CreateUpdateUserID , -- LastModifiedBy - int
                    GETDATE() -- LastModifiedOn - datetime			        
                    )
                    
            SELECT  @MessageAttachmentID = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}Social_MessageAttachments
            SET     [FileID] = @FileID,
					[MessageID] = @MessageID,
                    LastModifiedByUserID = @CreateUpdateUserID,
                    LastModifiedOnDate = GETDATE()
            WHERE   MessageAttachmentID = @MessageAttachmentID
        END
        
    SELECT  @MessageAttachmentID
        
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetSocialMessageAttachment]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSocialMessageAttachment]
GO

CREATE PROC {databaseOwner}[{objectQualifier}GetSocialMessageAttachment] 
    @MessageAttachmentID INT
AS 
	SELECT [MessageID], [FileID], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate] 
	FROM   {databaseOwner}{objectQualifier}Social_MessageAttachments
	WHERE  [MessageAttachmentID] = @MessageAttachmentID 

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetSocialMessageAttachmentsByMessage]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSocialMessageAttachmentsByMessage]
GO

CREATE PROC {databaseOwner}[{objectQualifier}GetSocialMessageAttachmentsByMessage] 
    @MessageID INT
AS 
	SELECT [MessageID], [FileID], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate] 
	FROM   {databaseOwner}{objectQualifier}Social_MessageAttachments
	WHERE  [MessageID] = @MessageID 

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteSocialMessageAttachment]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteSocialMessageAttachment]
GO

CREATE PROC {databaseOwner}[{objectQualifier}DeleteSocialMessageAttachment] 
    @MessageAttachmentID int
AS 
	DELETE FROM {databaseOwner}{objectQualifier}Social_MessageAttachments
	WHERE  [MessageAttachmentID] = @MessageAttachmentID
GO

/* Add ExtendedVisibility To UserProfile Table */
/***********************************************/

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME='{objectQualifier}UserProfile' AND COLUMN_NAME='ExtendedVisibility')
	BEGIN
		-- Add Column
		ALTER TABLE {databaseOwner}{objectQualifier}UserProfile
			ADD ExtendedVisibility varchar(400) NULL
	END
GO

/* Update UpdateUserProfileProperty */
/************************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateUserProfileProperty]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateUserProfileProperty]
GO

CREATE PROC {databaseOwner}[{objectQualifier}UpdateUserProfileProperty] 

	@ProfileID				int,
	@UserID					int,
	@PropertyDefinitionID	int,
	@PropertyValue			ntext,
	@Visibility				int,
	@ExtendedVisibility		varchar(400),
	@LastUpdatedDate		datetime

AS
	IF @ProfileID IS NULL OR @ProfileID = -1
		-- Try the UserID/PropertyDefinitionID to see if the Profile property exists
		SELECT @ProfileID = ProfileID
			FROM   {databaseOwner}{objectQualifier}UserProfile
			WHERE  UserID = @UserID AND PropertyDefinitionID = @PropertyDefinitionID
	 
	IF @ProfileID IS NOT NULL
		-- Update Property
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}UserProfile
				SET PropertyValue = case when (DATALENGTH(@PropertyValue) > 7500) then NULL else @PropertyValue end,
					PropertyText = case when (DATALENGTH(@PropertyValue) > 7500) then @PropertyValue else NULL end,
					Visibility = @Visibility,
					ExtendedVisibility = @ExtendedVisibility,
					LastUpdatedDate = @LastUpdatedDate
				WHERE  ProfileID = @ProfileID
			SELECT @ProfileID
		END
	ELSE
		-- Insert New Property
		BEGIN
			INSERT INTO {databaseOwner}{objectQualifier}UserProfile (
				UserID,
				PropertyDefinitionID,
				PropertyValue,
				PropertyText,
				Visibility,
				ExtendedVisibility,
				LastUpdatedDate
			  )
			VALUES (
				@UserID,
				@PropertyDefinitionID,
				case when (DATALENGTH(@PropertyValue) > 7500) then NULL else @PropertyValue end,
				case when (DATALENGTH(@PropertyValue) > 7500) then @PropertyValue else NULL end,
				@Visibility,
				@ExtendedVisibility,
				@LastUpdatedDate
			  )

		SELECT SCOPE_IDENTITY()
	END
GO

/* Update GetUserProfile */
/*************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserProfile]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserProfile]
GO

CREATE PROC {databaseOwner}[{objectQualifier}GetUserProfile] 
	@UserID int
AS
	SELECT
		ProfileID,
		UserID,
		PropertyDefinitionID,
		CASE WHEN (PropertyValue Is Null) THEN PropertyText ELSE PropertyValue END AS 'PropertyValue',
		Visibility,
		ExtendedVisibility,
		LastUpdatedDate
	FROM	{databaseOwner}{objectQualifier}UserProfile
	WHERE   UserId = @UserID
GO

/* Journal Items */
/*************************/

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}Journal_JournalTypes]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Journal] DROP CONSTRAINT [FK_{objectQualifier}Journal_JournalTypes]
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Journal_ProfileId]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Journal] DROP CONSTRAINT [DF_{objectQualifier}Journal_ProfileId]
END
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Journal_GroupId]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Journal] DROP CONSTRAINT [DF_{objectQualifier}Journal_GroupId]
END
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}JournalTypes_PortalId]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] DROP CONSTRAINT [DF_{objectQualifier}JournalTypes_PortalId]
END
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}JournalTypes_IsEnabled]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] DROP CONSTRAINT [DF_{objectQualifier}JournalTypes_IsEnabled]
END
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}JournalTypes_AppliesToProfile]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] DROP CONSTRAINT [DF_{objectQualifier}JournalTypes_AppliesToProfile]
END
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}JournalTypes_AppliesToGroup]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] DROP CONSTRAINT [DF_{objectQualifier}JournalTypes_AppliesToGroup]
END
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}JournalTypes_AppliesToStream]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] DROP CONSTRAINT [DF_{objectQualifier}JournalTypes_AppliesToStream]
END
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}JournalTypes_SupportsNotify]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] DROP CONSTRAINT [DF_{objectQualifier}JournalTypes_SupportsNotify]
END
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}Journal_Data_Journal]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Data]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Data] DROP CONSTRAINT [FK_{objectQualifier}Journal_Data_Journal]
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}JournalComments_Journal]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Comments]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Comments] DROP CONSTRAINT [FK_{objectQualifier}JournalComments_Journal]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Journal]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Access]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Journal_Access]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Security]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Journal_Security]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_TypeFilters]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Journal_TypeFilters]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Types]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Journal_Types]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Data]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Journal_Data]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Comments]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Journal_Comments]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Journal](
	[JournalId] [int] IDENTITY(1,1) NOT NULL,
	[JournalTypeId] [int] NOT NULL,
	[UserId] [int] NULL,
	[DateCreated] [datetime] NULL,
	[DateUpdated] [datetime] NULL,
	[PortalId] [int] NULL,
	[ProfileId] [int] NOT NULL,
	[GroupId] [int] NOT NULL,
	[Title] [nvarchar](255) NULL,
	[Summary] [nvarchar](2000) NULL,
	[ItemData] [nvarchar](2000) NULL,
	[ImageURL] [nvarchar](255) NULL,
	[ObjectKey] [nvarchar](255) NULL,
	[AccessKey] [uniqueidentifier] NULL,
	[ContentItemId] [int] NULL,
 CONSTRAINT [PK_{objectQualifier}Journal] PRIMARY KEY CLUSTERED 
(
	[JournalId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Journal_Access](
	[JournalTypeId] [int] NOT NULL,
	[PortalId] [int] NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[AccessKey] [uniqueidentifier] NOT NULL,
	[IsEnabled] [bit] NOT NULL,
	[DateCreated] [datetime] NOT NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Journal_Security](
	[JournalId] [int] NOT NULL,
	[SecurityKey] [nvarchar](50) NOT NULL,
 CONSTRAINT [IX_{objectQualifier}Journal_Security] UNIQUE NONCLUSTERED 
(
	[JournalId] DESC,
	[SecurityKey] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Journal_TypeFilters](
	[PortalId] [int] NOT NULL,
	[JournalMode] [int] NOT NULL,
	[JournalTypeId] [int] NOT NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Journal_Types](
	[JournalTypeId] [int] NOT NULL,
	[JournalType] [nvarchar](25) NULL,
	[icon] [nvarchar](25) NULL,
	[PortalId] [int] NOT NULL,
	[IsEnabled] [bit] NOT NULL,
	[AppliesToProfile] [bit] NOT NULL,
	[AppliesToGroup] [bit] NOT NULL,
	[AppliesToStream] [bit] NOT NULL,
	[Options] [nvarchar](max) NULL,
	[SupportsNotify] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}JournalTypes] PRIMARY KEY CLUSTERED 
(
	[JournalTypeId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Journal_Data](
	[JournalId] [int] NOT NULL,
	[JournalXML] [xml] NOT NULL
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Journal_Comments](
	[ContentItemID] [int] NULL,
	[JournalId] [int] NULL
) ON [PRIMARY]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}Journal_JournalTypes] FOREIGN KEY([JournalTypeId])
REFERENCES {databaseOwner}[{objectQualifier}Journal_Types] ([JournalTypeId])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal] NOCHECK CONSTRAINT [FK_{objectQualifier}Journal_JournalTypes]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal] ADD  CONSTRAINT [DF_{objectQualifier}Journal_ProfileId]  DEFAULT ((-1)) FOR [ProfileId]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal] ADD  CONSTRAINT [DF_{objectQualifier}Journal_GroupId]  DEFAULT ((-1)) FOR [GroupId]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] ADD  CONSTRAINT [DF_{objectQualifier}JournalTypes_PortalId]  DEFAULT ((-1)) FOR [PortalId]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] ADD  CONSTRAINT [DF_{objectQualifier}JournalTypes_IsEnabled]  DEFAULT ((1)) FOR [IsEnabled]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] ADD  CONSTRAINT [DF_{objectQualifier}JournalTypes_AppliesToProfile]  DEFAULT ((1)) FOR [AppliesToProfile]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] ADD  CONSTRAINT [DF_{objectQualifier}JournalTypes_AppliesToGroup]  DEFAULT ((1)) FOR [AppliesToGroup]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] ADD  CONSTRAINT [DF_{objectQualifier}JournalTypes_AppliesToStream]  DEFAULT ((1)) FOR [AppliesToStream]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] ADD  CONSTRAINT [DF_{objectQualifier}JournalTypes_SupportsNotify]  DEFAULT ((0)) FOR [SupportsNotify]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Data]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}Journal_Data_Journal] FOREIGN KEY([JournalId])
REFERENCES {databaseOwner}[{objectQualifier}Journal] ([JournalId])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Data] NOCHECK CONSTRAINT [FK_{objectQualifier}Journal_Data_Journal]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Comments]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}JournalComments_Journal] FOREIGN KEY([JournalId])
REFERENCES {databaseOwner}[{objectQualifier}Journal] ([JournalId])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Comments] NOCHECK CONSTRAINT [FK_{objectQualifier}JournalComments_Journal]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_LikeList]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_LikeList]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Like]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_Like]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_ListForProfile]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_ListForProfile]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_Save]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_Delete]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_UpdateContentItemId]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_UpdateContentItemId]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_LikeList]
@PortalId int,
@JournalId int
AS
DECLARE @xdoc xml
set @xdoc = (SELECT journalxml.query('//likes') 
				from {databaseOwner}[{objectQualifier}Journal_Data] as jd
				INNER JOIN {databaseOwner}[{objectQualifier}Journal] as j ON j.JournalId = jd.JournalId
				 WHERE j.JournalId = @JournalId AND j.PortalId = @PortalId)
Select u.UserId, u.DisplayName,u.FirstName,u.LastName,u.Email,u.Username 
	FROM @xdoc.nodes('/likes//u') as e(x) 
CROSS APPLY {databaseOwner}[{objectQualifier}Users] as u
WHERE u.UserID = x.value('@uid[1]','int')
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Like]
@JournalId int,
@UserId int,
@UserName nvarchar(50)
AS 
IF NOT EXISTS (SELECT JournalId from {databaseOwner}[{objectQualifier}Journal_Data] WHERE JournalId = @JournalId)
	BEGIN
		DECLARE @x xml
		SET @x = '<items><item /></items>';
		INSERT INTO {databaseOwner}[{objectQualifier}Journal_Data] 
			(JournalId, JournalXML)
			VALUES
			(@JournalId, @x)
	END
IF EXISTS(SELECT j.JournalId 
			FROM {databaseOwner}{objectQualifier}Journal as j INNER JOIN
				{databaseOwner}{objectQualifier}Journal_Data as jx ON j.JournalId = jx.JournalId 
			WHERE j.JournalId = @JournalId 
				AND 
				jx.journalxml.exist('/items/likes/u[@uid=sql:variable("@userid")]') = 1)
BEGIN
UPDATE {databaseOwner}{objectQualifier}Journal_Data
SET JournalXML.modify('delete (/items/likes/u[@uid=sql:variable("@UserId")])')
WHERE JournalId = @JournalId 
	AND journalxml.exist('/items/likes/u[@uid=sql:variable("@UserId")]') = 1
END
ELSE
	BEGIN
		BEGIN
			IF NOT EXISTS(SELECT JournalId FROM {databaseOwner}{objectQualifier}Journal_Data
							WHERE JournalId = @JournalId 
									AND
								journalxml.exist('/items/likes') = 1)
				BEGIN
					UPDATE {databaseOwner}{objectQualifier}Journal_Data
					SET JournalXML.modify('insert <likes /> as last into (/items)[1]') 
					WHERE JournalId = @JournalId AND journalxml.exist('/items') = 1
				END
		END
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}Journal_Data
			SET JournalXML.modify('insert <u uid="{xs:string(sql:variable("@UserId"))}" un="{xs:string(sql:variable("@UserName"))}" /> as last into (/items/likes)[1]')
			Where JournalId = @JournalId AND journalxml.exist('/items/likes') = 1
		END
	END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_ListForProfile]
@PortalId int,
@CurrentUserId int,
@ProfileId int,
@RowIndex int,
@MaxRows int
AS
DECLARE @EndRow int
SET @EndRow = @RowIndex + @MaxRows;
WITH journalItems  AS
(
	SELECT	JournalId,
			ROW_NUMBER() OVER (ORDER BY JournalId DESC) AS RowNumber
	FROM	{databaseOwner}{objectQualifier}Journal
	WHERE PortalId = @PortalId AND ProfileId = @ProfileId
)
SELECT	j.JournalId, j.JournalTypeId, j.Title, j.Summary, j.UserId, j.DateCreated, j.DateUpdated, j.PortalId,
			j.ProfileId, j.GroupId, j.ObjectKey, j.AccessKey,
			"JournalOwner" = '<entity><id>' + CAST(p.UserId as nvarchar(150)) + '</id><name>' + p.DisplayName + '</name></entity>',
			"JournalAuthor" = CASE WHEN ISNULL(a.UserId,-1) >0 THEN '<entity><id>' + CAST(a.UserId as nvarchar(150)) + '</id><name>' + a.DisplayName + '</name></entity>' ELSE '' END,
			"JournalOwnerId" = ISNULL(j.ProfileId,j.UserId),
			 jt.Icon, jt.JournalType,
			"Profile" = CASE WHEN j.ProfileId > 0 THEN '<entity><id>' + CAST(p.UserID as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name><vanity></vanity></entity>' ELSE '' END,
			jd.JournalXML, j.ContentItemId, j.ItemData, RowNumber
FROM	journalItems as ji INNER JOIN 
	{databaseOwner}[{objectQualifier}Journal] as j ON j.JournalId = ji.JournalId INNER JOIN
{databaseOwner}[{objectQualifier}Journal_Types] as jt ON jt.JournalTypeId = j.JournalTypeId LEFT OUTER JOIN
			{databaseOwner}[{objectQualifier}Journal_Data] as jd on jd.JournalId = j.JournalId LEFT OUTER JOIN
            {databaseOwner}[{objectQualifier}Users] AS p ON j.ProfileId = p.UserID LEFT OUTER JOIN
            {databaseOwner}[{objectQualifier}Users] AS a ON j.UserId = a.UserID
WHERE	RowNumber BETWEEN @RowIndex AND @EndRow
ORDER BY RowNumber ASC;

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Get]
@PortalId int,
@CurrentUserId int,
@JournalId int
AS
SELECT     j.JournalId, j.JournalTypeId, j.Title, j.Summary, j.UserId, j.DateCreated, j.DateUpdated, j.PortalId,
			j.ProfileId, j.GroupId, j.ObjectKey, j.AccessKey,
			"JournalOwner" = '<entity><id>' + CAST(p.UserId as nvarchar(150)) + '</id><name>' + p.DisplayName + '</name></entity>',
			"JournalAuthor" = CASE WHEN ISNULL(a.UserId,-1) >0 THEN '<entity><id>' + CAST(a.UserId as nvarchar(150)) + '</id><name>' + a.DisplayName + '</name></entity>' ELSE '' END,
			"JournalOwnerId" = ISNULL(j.ProfileId,j.UserId),
			 jt.Icon, jt.JournalType,
			"Profile" = CASE WHEN j.ProfileId > 0 THEN '<entity><id>' + CAST(p.UserID as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name><vanity></vanity></entity>' ELSE '' END,
			jd.JournalXML, ContentItemId, j.ItemData			
FROM       	{databaseOwner}[{objectQualifier}Journal] AS j INNER JOIN
			{databaseOwner}[{objectQualifier}Journal_Types] as jt ON jt.JournalTypeId = j.JournalTypeId LEFT OUTER JOIN
			{databaseOwner}[{objectQualifier}Journal_Data] as jd on jd.JournalId = j.JournalId LEFT OUTER JOIN
            {databaseOwner}[{objectQualifier}Users] AS p ON j.ProfileId = p.UserID LEFT OUTER JOIN
            {databaseOwner}[{objectQualifier}Users] AS a ON j.UserId = a.UserID
WHERE j.JournalId = @JournalId
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Save]
@PortalId int,
@JournalId int,
@JournalTypeId int,
@UserId int,
@ProfileId int,
@GroupId int,
@Title nvarchar(255),
@Summary nvarchar(2000),
@ItemData nvarchar(2000),
@JournalXML xml,
@ObjectKey nvarchar(255),
@AccessKey uniqueidentifier
AS
INSERT INTO {databaseOwner}[{objectQualifier}Journal]
	(JournalTypeId, UserId, DateCreated, DateUpdated, PortalId, ProfileId, GroupId,Title,Summary, ObjectKey, AccessKey, ItemData)
	VALUES
	(@JournalTypeId, @UserId, GETUTCDATE(), GETUTCDATE(), @PortalId, @ProfileId, @GroupId, @Title, @Summary, @ObjectKey, @AccessKey, @ItemData)
SET @JournalId = SCOPE_IDENTITY()
IF @JournalXML IS NOT NULL
BEGIN
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Data]
	(JournalId, JournalXML)
	VALUES
	(@JournalId, @JournalXML)
END
SELECT @JournalId
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Delete]
@JournalId int
AS
DELETE FROM {databaseOwner}[{objectQualifier}Journal] WHERE JournalId = @JournalId
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_UpdateContentItemId]
@JournalId int,
@ContentItemId int
AS
UPDATE {databaseOwner}[{objectQualifier}Journal]
	SET ContentItemId = @ContentItemId
WHERE JournalId = @JournalId
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(1, 'status', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(2, 'link', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(3, 'photo', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(4, 'file', '', -1, 1, 1, 1, 1, null, 1)
GO
/* Add GetInbox Procedure */
/************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetInbox]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetInbox]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetInbox]
	@UserID  int,
	@PageIndex      int,
	@PageSize       int,
	@TotalRecords	int
AS
BEGIN
		-- Set the page bounds
		DECLARE 
			@PageLowerBound INT, 
			@PageUpperBound INT, 
			@RowsToReturn int;
		exec {databaseOwner}{objectQualifier}CalculatePagingInformation @PageIndex, @PageSize, @RowsToReturn output, @PageLowerBound output, @PageUpperBound output;
WITH inboxItems  AS
(
	SELECT	RecipientID,
			ROW_NUMBER() OVER (ORDER BY RecipientID DESC) AS RowNumber
	FROM	{databaseOwner}{objectQualifier}Social_MessageRecipients
	WHERE UserID = @UserID
)	
SELECT * from inboxItems where RowNumber BETWEEN @PageLowerBound AND @PageUpperBound 
order by RowNumber ASC
END
GO

/* Add UpdateSocialMessageStatus Procedure */
/************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateSocialMessageStatus]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateSocialMessageStatus]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateSocialMessageStatus]
	@RecipientID	int,
	@Status			int
AS
BEGIN
UPDATE {databaseOwner}[{objectQualifier}Social_MessageRecipients] SET [Status]=@Status WHERE RecipientID=@RecipientID
END
GO

/* Add GetUserRelationships Procedure */
/**************************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserRelationships]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationships]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationships]
	@UserID INT
AS 
	SELECT  UserRelationshipID,
			UserID,
			RelatedUserID,
			RelationshipID,            
			Status,            
			CreatedByUserID ,
			CreatedOnDate ,
			LastModifiedByUserID ,
			LastModifiedOnDate
	FROM    {databaseOwner}{objectQualifier}UserRelationships    		
	WHERE UserID = @UserID OR RelatedUserID = @UserID
GO

/* Add GetUsersByFilters Procedure */
/**************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUsersByFilters]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUsersByFilters]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUsersByFilters]
	@PortalId INT,
	@CurrentUserId INT, -- default = -1
	@NumberOfRecords INT,
	@FilterByRole INT, -- default = -1
	@FilterByRelationshipType INT, -- RelationshipTypeID. default = -1
	@FilterByProfileProperty NVARCHAR(50), -- PropertyName
	@FilterByProfilePropertyValue NVARCHAR(3750),
	@SortBy NVARCHAR(100), -- Indicates the column name. Includes one of the following prefixes "User:" or "Profile:". Example 'Profile:LastName'
	@SortAscending BIT, -- 1 - ASC; 0 - DESC; DEFAULT = 1
	@IsAdmin BIT
AS 
	-- GET PROFILE PROPERTIES
	CREATE TABLE #ProfileProperties
	(
		PropertyName NVARCHAR(50),
		RowNumber INT
	)
	INSERT INTO #ProfileProperties
		SELECT PropertyName, ROW_NUMBER() OVER(ORDER BY ViewOrder ASC) AS RowNumber
		FROM {databaseOwner}{objectQualifier}ProfilePropertyDefinition
		WHERE Deleted = 0 AND PortalID = @PortalId

	DECLARE @PropertyCount INT
	DECLARE @PropertyIndex INT
	DECLARE @PropertyName NVARCHAR(50)
	DECLARE @ProfileProperties NVARCHAR(MAX)

	SELECT @PropertyCount = COUNT(*) FROM #ProfileProperties

	-- SETUP SCRIPT
	DECLARE @script NVARCHAR(MAX)
	DECLARE @params NVARCHAR(300)

	SET @params = N'@PortalId INT, @CurrentUserId INT, @FilterByRole INT, @FilterByRelationshipType INT, @FilterByProfilePropertyValue NVARCHAR(3750), @SortBy NVARCHAR(100), @SortAscending BIT, @IsAdmin BIT'

	-- SELECT COLUMNS
	SET @script = N'
		SELECT TOP ' + CONVERT(NVARCHAR(20), @NumberOfRecords) + N'
			U.UserID AS [Member:UserID],
			U.Username AS [Member:Username],
			U.FirstName AS [Member:FirstName],
			U.LastName AS [Member:LastName],
			U.Email AS [Member:Email],
			U.DisplayName AS [Member:DisplayName]'

	SET @PropertyIndex = 0
	SET @ProfileProperties = N''

	-- ADD PROFILE PROPERTIES AS COLUMNS
	IF @PropertyCount > 0 BEGIN
		WHILE @PropertyIndex < @PropertyCount BEGIN
			SELECT @PropertyName = PropertyName
			FROM #ProfileProperties
			WHERE RowNumber = @PropertyIndex + 1
			
			SET @script = @script + N', UserProperties.[' + @PropertyName + N'] AS [MemberProfile:' + @PropertyName + N']'
			SET @ProfileProperties = @ProfileProperties + N'[' + @PropertyName + N'],'
			
			SET @PropertyIndex = @PropertyIndex + 1
		END
		
		SET @ProfileProperties = LEFT(@ProfileProperties, LEN(@ProfileProperties)-1)
	END

	-- FROM CLAUSE
	SET @script = @script + N'
		FROM [dbo].[dnn_Users] U
		JOIN [dbo].[dnn_UserPortals] UP ON U.UserID = UP.UserId'

	SET @PropertyIndex = 1

	IF @PropertyCount > 0 BEGIN
		SET @script = @script + N'
		JOIN (
			SELECT *
			FROM (
				SELECT
					UserID,
					PropertyName,				
					CASE
						WHEN Visibility = 0 THEN PropertyValue
						WHEN Visibility = 1 AND @IsAdmin = 1 THEN PropertyValue
						WHEN Visibility = 1 AND @IsAdmin = 0 AND @CurrentUserID > 0 THEN PropertyValue
						WHEN Visibility = 2 AND @IsAdmin = 1 THEN PropertyValue
						ELSE NULL
					END AS PropertyValue
				FROM {databaseOwner}{objectQualifier}UserProfile UPF
				JOIN {databaseOwner}{objectQualifier}ProfilePropertyDefinition PPD ON UPF.PropertyDefinitionID = PPD.PropertyDefinitionID
				WHERE [Deleted] = 0 AND [PortalID] = @PortalId
			) AS SourceTable
			PIVOT (
				MIN(PropertyValue) 
				FOR PropertyName IN (' + @ProfileProperties + N')
			) AS UserPropertiesPVT
		) AS UserProperties ON U.UserID = UserProperties.UserID'
	END

	-- FILTERS
	IF @FilterByRole <> -1 BEGIN
		SET @script = @script + N'
		JOIN {databaseOwner}{objectQualifier}UserRoles UR ON U.UserID = UR.UserID AND UR.RoleID = @FilterByRole'
	END

	IF @CurrentUserId <> -1 AND @FilterByRelationshipType <> -1  BEGIN
		SET @script = @script + N'
		JOIN {databaseOwner}{objectQualifier}Relationships REL ON REL.PortalID = @PortalId AND RelationshipTypeID = @FilterByRelationshipType
		JOIN {databaseOwner}{objectQualifier}UserRelationships UREL ON
			REL.RelationshipID = UREL.RelationshipID AND
			((UREL.UserID = @CurrentUserId AND UREL.RelatedUserID = U.UserID) OR
			(UREL.UserID = U.UserID AND UREL.RelatedUserID = @CurrentUserId))'
	END

	-- WHERE CLAUSE
	SET @script = @script + N'
		WHERE U.IsDeleted = 0 AND UP.PortalId = @PortalId'

	IF @FilterByProfileProperty IS NOT NULL
		AND EXISTS(SELECT * FROM #ProfileProperties WHERE PropertyName LIKE @FilterByProfileProperty)
		AND @FilterByProfileProperty IS NOT NULL BEGIN
		SET @script = @script + N'
		AND UserProperties.[' + @FilterByProfileProperty + N'] = @FilterByProfilePropertyValue'
	END

	-- SORTING
	IF @SortBy <> '' BEGIN
		SET @script = @script + N'
		ORDER BY [' + @SortBy + CASE WHEN @SortAscending = 1 THEN N'] ASC' ELSE N'] DESC' END
	END

	EXEC sp_executesql @script, @params, @PortalId, @CurrentUserId, @FilterByRole, @FilterByRelationshipType, @FilterByProfilePropertyValue, @SortBy, @SortAscending, @IsAdmin

	DROP TABLE #ProfileProperties


