// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DotNetNuke.Tests.Website.DesktopModules.Sketch
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Create a Sketch of a Feature")]
    public partial class CreateASketchOfAFeatureFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CreateSketch.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Create a Sketch of a Feature", "In order to explain in a step by step nature a feature of DNN\r\nAs a Product Manag" +
                    "er, Engineer, Test Writer or Technical Writer\r\nI want to be able to quickly comm" +
                    "unicate how the feature works", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Creating a Sketch with existing Steps and Outcomes")]
        [NUnit.Framework.TestCaseAttribute("philt3r", "password", "Registered Users", "Creating a Sketch with existing Steps and Outcomes", "Here is the description", "[Login as a user in the Administrator role][Go to /Admin/UserAccounts.aspx]", "SMTP must be set up", null)]
        [NUnit.Framework.TestCaseAttribute("deadmau5", "password", "Administrator", "Creating a Sketch with existing Steps and Outcomes", "Here is the description", "[Login as a user in the Administrator role][Go to /Admin/UserAccounts.aspx]", "SMTP must be set up", null)]
        public virtual void CreatingASketchWithExistingStepsAndOutcomes(string scenarioUserName, string scenarioPassword, string scenarioRole, string title, string description, string steps, string pre_Requsites, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Creating a Sketch with existing Steps and Outcomes", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Role",
                        "Permission",
                        "Value"});
            table1.AddRow(new string[] {
                        "All Users",
                        "View",
                        "Allowed"});
#line 7
 testRunner.Given("There is a Page called Sketches with these permissions", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Role",
                        "Permission",
                        "Value"});
            table2.AddRow(new string[] {
                        "User Account Administrator",
                        "View",
                        "Allowed"});
#line 10
 testRunner.And("There is a Sketch module on the page with these permissions", ((string)(null)), table2, "And ");
#line 13
 testRunner.Given(string.Format("Login as UID={0} PWD={1} Role={2}", scenarioUserName, scenarioPassword, scenarioRole), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
 testRunner.When("Right click on the Feature in the Sketches tree and select Add Sketch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
 testRunner.And(string.Format("In the Title text box, enter the name of the Sketch {0}", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And("In the Page Permission grid set the permissions for the Page for this Sketch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.And("In the Module Permission grid set the permissions for the Module for this Sketch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.And(string.Format("In the Description field describe the main function of the Sketch and its expecte" +
                        "d outcome {0}", description), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.And(string.Format("In the Pre-requsites field start typing the Pre-requsite and select the Pre-requs" +
                        "ite you wish to use from the autocomplete list {0}", pre_Requsites), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.And(string.Format("In the Steps field start typing the step and select the Step you wish to use from" +
                        " the autocomplete list {0}", steps), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.And("In the Examples grid fill out a value for each field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.And("Click the Save button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.Then("A new Sketch node will appear in the Sketches tree", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 24
 testRunner.And("The Sketch editing form will switch to View mode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
