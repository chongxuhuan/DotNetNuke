// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DotNetNuke.Website.Specs.UserAccounts
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ManageProfileProperties")]
    public partial class ManageProfilePropertiesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ProfileProperties.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ManageProfileProperties", "In order to allow users to manage their Profile on my site\r\nAs an Administrator\r\n" +
                    "I want to view a list of Users", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("View Profile Properties")]
        [NUnit.Framework.CategoryAttribute("MustBeDefaultAdminCredentials")]
        public virtual void ViewProfileProperties()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View Profile Properties", new string[] {
                        "MustBeDefaultAdminCredentials"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I am on the site home page");
#line 9
 testRunner.And("I have logged in as the admin");
#line 10
 testRunner.And("I am on the admin page Site Settings");
#line 11
 testRunner.Then("A list of Profile Properties is displayed");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should be able to add a Profile Property")]
        [NUnit.Framework.CategoryAttribute("ClearExtraProfileProperties")]
        public virtual void ShouldBeAbleToAddAProfileProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should be able to add a Profile Property", new string[] {
                        "ClearExtraProfileProperties"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("I am on the site home page");
#line 16
 testRunner.And("I have logged in as the host");
#line 17
 testRunner.And("I have cleared the dotnetnuke cache");
#line 18
 testRunner.And("I am on the admin page Site Settings");
#line 19
 testRunner.When("I click Add New Profile Property");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Control",
                        "Value"});
            table1.AddRow(new string[] {
                        "Property Name",
                        "TestProperty"});
            table1.AddRow(new string[] {
                        "Data Type",
                        "Text"});
            table1.AddRow(new string[] {
                        "Property Category",
                        "Basic"});
            table1.AddRow(new string[] {
                        "Length",
                        "100"});
            table1.AddRow(new string[] {
                        "Required",
                        "false"});
            table1.AddRow(new string[] {
                        "Visible",
                        "true"});
            table1.AddRow(new string[] {
                        "ReadOnly",
                        "false"});
#line 20
 testRunner.And("I fill in the profile property form", ((string)(null)), table1);
#line 29
 testRunner.And("I click Next");
#line 30
 testRunner.And("I click Return");
#line 31
 testRunner.Then("Profile Property TestProperty is created correctly");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Should be able to edit a Profile Property")]
        [NUnit.Framework.CategoryAttribute("MustBeDefaultAdminCredentials")]
        public virtual void ShouldBeAbleToEditAProfileProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should be able to edit a Profile Property", new string[] {
                        "MustBeDefaultAdminCredentials"});
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
 testRunner.Given("I am on the site home page");
#line 36
 testRunner.And("I have logged in as the admin");
#line 37
 testRunner.And("I am on the admin page Site Settings");
#line 38
 testRunner.When("I click Edit LastName Link");
#line 39
 testRunner.Then("Edit Profile Page is displayed for LastName");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Profile Property with Visible set to false should be Visible to Admin User")]
        [NUnit.Framework.CategoryAttribute("ClearExtraProfileProperties")]
        [NUnit.Framework.CategoryAttribute("MustHaveAUserWithFullProfile")]
        public virtual void AProfilePropertyWithVisibleSetToFalseShouldBeVisibleToAdminUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Profile Property with Visible set to false should be Visible to Admin User", new string[] {
                        "ClearExtraProfileProperties",
                        "MustHaveAUserWithFullProfile"});
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("I am on the site home page");
#line 45
 testRunner.And("I have logged in as the host");
#line 46
 testRunner.And("I have cleared the dotnetnuke cache");
#line 47
 testRunner.And("I am on the admin page Site Settings");
#line 48
 testRunner.And("I click Add New Profile Property");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Control",
                        "Value"});
            table2.AddRow(new string[] {
                        "Property Name",
                        "VisibleFalse"});
            table2.AddRow(new string[] {
                        "Data Type",
                        "Text"});
            table2.AddRow(new string[] {
                        "Property Category",
                        "Basic"});
            table2.AddRow(new string[] {
                        "Length",
                        "100"});
            table2.AddRow(new string[] {
                        "Required",
                        "false"});
            table2.AddRow(new string[] {
                        "Visible",
                        "false"});
            table2.AddRow(new string[] {
                        "ReadOnly",
                        "false"});
#line 49
 testRunner.And("I fill in the profile property form", ((string)(null)), table2);
#line 58
 testRunner.And("I click Next");
#line 59
 testRunner.And("I click Return");
#line 60
 testRunner.And("I am on the admin page User Accounts");
#line 61
 testRunner.When("I click the Edit User Link for Michael Woods");
#line 62
 testRunner.And("I click the Manage Profile Tab");
#line 63
 testRunner.Then("Profile Property VisibleFalse is visible");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Profile Property with Visible set to false should not be Visible to User")]
        [NUnit.Framework.CategoryAttribute("ClearExtraProfileProperties")]
        [NUnit.Framework.CategoryAttribute("MustHaveAUserWithFullProfile")]
        public virtual void AProfilePropertyWithVisibleSetToFalseShouldNotBeVisibleToUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Profile Property with Visible set to false should not be Visible to User", new string[] {
                        "ClearExtraProfileProperties",
                        "MustHaveAUserWithFullProfile"});
#line 67
this.ScenarioSetup(scenarioInfo);
#line 68
 testRunner.Given("I am on the site home page");
#line 69
 testRunner.And("I have logged in as the host");
#line 70
 testRunner.And("I have cleared the dotnetnuke cache");
#line 71
 testRunner.And("I am on the admin page Site Settings");
#line 72
 testRunner.And("I click Add New Profile Property");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Control",
                        "Value"});
            table3.AddRow(new string[] {
                        "Property Name",
                        "VisibleFalse"});
            table3.AddRow(new string[] {
                        "Data Type",
                        "Text"});
            table3.AddRow(new string[] {
                        "Property Category",
                        "Basic"});
            table3.AddRow(new string[] {
                        "Length",
                        "100"});
            table3.AddRow(new string[] {
                        "Required",
                        "false"});
            table3.AddRow(new string[] {
                        "Visible",
                        "false"});
            table3.AddRow(new string[] {
                        "ReadOnly",
                        "false"});
#line 73
 testRunner.And("I fill in the profile property form", ((string)(null)), table3);
#line 82
 testRunner.And("I click Next");
#line 83
 testRunner.And("I click Return");
#line 84
 testRunner.And("I log off");
#line 85
 testRunner.And("I have logged in as the user MichaelWoods password1234");
#line 86
 testRunner.When("I have clicked on my name");
#line 87
 testRunner.And("I click Edit Profile");
#line 88
 testRunner.And("I click the Manage Profile Tab");
#line 89
 testRunner.Then("Profile Property VisibleFalse is not visible");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Profile Property with ReadOnly set to true should be Visible to Admin User")]
        [NUnit.Framework.CategoryAttribute("ClearExtraProfileProperties")]
        [NUnit.Framework.CategoryAttribute("MustHaveAUserWithFullProfile")]
        public virtual void AProfilePropertyWithReadOnlySetToTrueShouldBeVisibleToAdminUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Profile Property with ReadOnly set to true should be Visible to Admin User", new string[] {
                        "ClearExtraProfileProperties",
                        "MustHaveAUserWithFullProfile"});
#line 93
this.ScenarioSetup(scenarioInfo);
#line 94
 testRunner.Given("I am on the site home page");
#line 95
 testRunner.And("I have logged in as the host");
#line 96
 testRunner.And("I have cleared the dotnetnuke cache");
#line 97
 testRunner.And("I am on the admin page Site Settings");
#line 98
 testRunner.And("I click Add New Profile Property");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Control",
                        "Value"});
            table4.AddRow(new string[] {
                        "Property Name",
                        "ReadOnly"});
            table4.AddRow(new string[] {
                        "Data Type",
                        "Text"});
            table4.AddRow(new string[] {
                        "Property Category",
                        "Basic"});
            table4.AddRow(new string[] {
                        "Length",
                        "100"});
            table4.AddRow(new string[] {
                        "Required",
                        "false"});
            table4.AddRow(new string[] {
                        "Visible",
                        "false"});
            table4.AddRow(new string[] {
                        "ReadOnly",
                        "true"});
#line 99
 testRunner.And("I fill in the profile property form", ((string)(null)), table4);
#line 108
 testRunner.And("I click Next");
#line 109
 testRunner.And("I click Return");
#line 110
 testRunner.And("I am on the admin page User Accounts");
#line 111
 testRunner.When("I click the Edit User Link for Michael Woods");
#line 112
 testRunner.And("I click the Manage Profile Tab");
#line 113
 testRunner.Then("Profile Property ReadOnly is visible");
#line 114
 testRunner.And("Profile Property ReadOnly is editable");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Profile Property with ReadOnly set to true should be Read Only for User")]
        [NUnit.Framework.CategoryAttribute("ClearExtraProfileProperties")]
        [NUnit.Framework.CategoryAttribute("MustHaveAUserWithFullProfile")]
        public virtual void AProfilePropertyWithReadOnlySetToTrueShouldBeReadOnlyForUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Profile Property with ReadOnly set to true should be Read Only for User", new string[] {
                        "ClearExtraProfileProperties",
                        "MustHaveAUserWithFullProfile"});
#line 118
this.ScenarioSetup(scenarioInfo);
#line 119
 testRunner.Given("I am on the site home page");
#line 120
 testRunner.And("I have logged in as the host");
#line 121
 testRunner.And("I have cleared the dotnetnuke cache");
#line 122
 testRunner.And("I am on the admin page Site Settings");
#line 123
 testRunner.And("I click Add New Profile Property");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Control",
                        "Value"});
            table5.AddRow(new string[] {
                        "Property Name",
                        "ReadOnly"});
            table5.AddRow(new string[] {
                        "Data Type",
                        "Text"});
            table5.AddRow(new string[] {
                        "Property Category",
                        "Basic"});
            table5.AddRow(new string[] {
                        "Length",
                        "100"});
            table5.AddRow(new string[] {
                        "Required",
                        "false"});
            table5.AddRow(new string[] {
                        "Visible",
                        "true"});
            table5.AddRow(new string[] {
                        "ReadOnly",
                        "true"});
#line 124
 testRunner.And("I fill in the profile property form", ((string)(null)), table5);
#line 133
 testRunner.And("I click Next");
#line 134
 testRunner.And("I click Return");
#line 135
 testRunner.And("I log off");
#line 136
 testRunner.And("I have logged in as the user MichaelWoods password1234");
#line 137
 testRunner.When("I have clicked on my name");
#line 138
 testRunner.And("I click Edit Profile");
#line 139
 testRunner.And("I click the Manage Profile Tab");
#line 140
 testRunner.Then("Profile Property ReadOnly is visible");
#line 141
 testRunner.And("Profile Property ReadOnly is not editable");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
