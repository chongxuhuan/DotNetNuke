<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetNuke.Tests.Steps</name>
    </assembly>
    <members>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.MustHaveEmailSetUpForSiteDumpToFolder">
            <summary>
            Sets up the site to send any emails sent by the website to a local folder.
            Any tests involving emails should have this tag. 
            Steps that involve emails expect for any email files they need to be in a specific local folder.  
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.MustHaveEmptyEmailFolder">
            <summary>
            Deletes any of the email files that are currently in the local email folder. 
            Using this tag with any test involving emails will ensure that the test will only find relevant emails that were sent during the current test.
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.SiteMustRunInFullTrust">
            <summary>
            Changes the sites web.config file so that the site will run in full trust. 
            The site must run in full trust to send emails to a local folder. 
            Use this tag if a test will be sending emails to a folder and checking for those emails. 
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.SiteMustRunInMediumTrust">
            <summary>
            Changes the sites web.config file so that the site will run in medium trust. 
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.MustHaveHelpUrlFilledOutForHtmlModule">
            <summary>
            Sets the HelpURL field for the HTML Module to
            hive.dotnetnuke.com/Default.aspx?tabid=265
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.MustHaveEmptyHelpUrlForHtmlModule">
            <summary>
            Sets the HelpURL field for the HTML Module to
            ""
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenIGoToTheModuleSettingsPage(System.Int32)">
            <summary>
            Clicks on the module settings link for the module in the postion specified. 
            Entering a moduleId of 0, will pick the first module on the page. 
            </summary>
            <param name="moduleId"></param>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenIGoToTheModulePermissionsTab(System.Int32)">
            <summary>
            Clicks on the module settings Permissions Tab for the module in the postion specified. 
            Entering a moduleId of 0, will pick the first module on the page. 
            </summary>
            <param name="moduleId"></param>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenIGoToTheModuleOnlineHelp(System.Int32)">
            <summary>
            Clicks on the module settings link for the module in the postion specified. 
            Entering a moduleId of 0, will pick the first module on the page. 
            </summary>
            <param name="moduleId"></param>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenIUncheckInheritViewPermissions">
            <summary>
            Unchecks the Inherit View Permissions checkbox
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenISetPermissionForRole(System.String,System.String,System.String)">
            <summary>
            Sets the permissions for the module
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.MustHaveTestPageAdded">
            <summary>
            Adds a page called Test Page to portal 0 without using the UI. 
            The page will be given edit a view permissions for the host and admin. 
            All other settings will be left blank.
            To access this page correctly during a test the dotnetnuke cache will need to be cleared. Be sure to use the statement "Given I have cleared the dotnetnuke cache" during your test.
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.GivenIAmOnTheSiteHomePageWithTimeOut(System.String)">
            <summary>
            Recycles the application pool and opens an ie instance to the site home page.
            This step will be the initial step to almost any scenario.
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.GivenIAmOnTheSiteHomePage">
            <summary>
            Recycles the application pool and opens an ie instance to the site home page.
            This step will be the initial step to almost any scenario.
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.GivenIAmViewingThePage(System.String)">
            <summary>
            Navigates to the root level page specified.
            Entering Test Page as a pageName would browse to "(mysite)/testpage.aspx"
            </summary>
            <param name="pageName"></param>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.GivenIAmOnTheAdminPage(System.String)">
            <summary>
            Navigates to the admin page specified.
            Entering Languages as a adminPageName would brose to "(mysite)/admin/languages.aspx"
            </summary>
            <param name="adminPageName"></param>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.IAmOnTheHostPage(System.String)">
            <summary>
            Navigates to the host page specified.
            Entering Superuser Accounts as a hostPageName would brose to "(mysite)/host/superuser%20accounts.aspx"
            </summary>
            <param name="hostPageName"></param>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.GivenIAmOnTheHostProFeaturePagePage(System.String)">
            <summary>
            Navigates to the host professional feature page specified.
            Entering Application Integrity as a hostPEPageName would browse to "(mysite)/host/professionalfeatures/application%20integrity.aspx"
            </summary>
            <param name="hostPEPageName"></param>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenINavigateToTheAdminPage(System.String)">
            <summary>
            Navigates to the admin page specified.
            Entering Languages as a adminPageName would brose to "(mysite)/admin/languages.aspx"
            </summary>
            <param name="adminPageName"></param>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.GivenIHaveCreatedThePage(System.String)">
            <summary>
            Creates a page with the name specified with the default settings for a page. 
            If the page already exists, the step will not create the page. 
            </summary>
            <param name="pageName"></param>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.GivenIHaveCreatedTheBlankPageFromTheRibbonBar(System.String)">
            <summary>
            Creates a page with the name specified and no template. 
            The page will be added from the Ribbon Bar, if a test will be using this statement you may want to add the @MustUseRibbonBar tag to make sure that the site uses the ribbon bar.
            The page will be added at the root level, no matter what page the test was on before executing this step. To add a child or grandchild page use a different statement. 
            </summary>
            <param name="pageName"></param>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.GivenIHaveCreatedThePageFromTheRibbonBar(System.String)">
            <summary>
            Creates a page with the name specified and the default template. 
            The page will be added from the Ribbon Bar, if a test will be using this statement you may want to add the @MustUseRibbonBar tag to make sure that the site uses the ribbon bar.
            The page will be added at the root level, no matter what page the test was on before executing this step. To add a child or grandchild page use a different statement. 
            </summary>
            <param name="pageName"></param>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.GivenIHaveCreatedThePageWithTemplateFromTheRibbonBar(System.String,System.String)">
            <summary>
            Creates a page with the name specified and template specified. 
            The page will be added from the Ribbon Bar, if a test will be using this statement you may want to add the @MustUseRibbonBar tag to make sure that the site uses the ribbon bar.
            The page will be added at the root level, no matter what page the test was on before executing this step. To add a child or grandchild page use a different statement. 
            </summary>
            <param name="pageName"></param>
            <param name="template"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DotNetNuke.Tests.Steps.BaseSteps.GivenThePageHasPermissionSetForRole(System.String,System.String,System.String,System.String)" -->
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenIClickTheLink(System.String)">
            <summary>
            Navigates to the admin page specified.
            Entering Languages as a adminPageName would brose to "(mysite)/admin/languages.aspx"
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.ThenIShouldNotSeeAnyErrorsOnThePage">
            <summary>
            Checks the current page for indications that an error has occurred. 
            If the statement finds an error image, or the text error in a message span on the page it will return false. 
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenIClickAdvancedSettingsTab">
            <summary>
            Clicks the advanced settings tab on the site settings page.
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenIClickPaymentSettingsSectionLink">
            <summary>
            Clicks the payment settings section link on the site settings page. 
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.CloseWindowAfterScenario">
            <summary>
            This after scenario method will be run after every test.
            It finds the ie instance that was opened for the test, ensures any users are logged off, and closes the window. 
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.GivenIHaveClearedTheDotnetnukeCache">
            <summary>
            Clears the dotnetnuke cache by clicking on the clear cache link in the ribbon bar. 
            The host must be logged in to perform this step.
            Use this step if a page has been added behind the scenes (using the @MustHaveTestPageAdded tag). 
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenIClickUpdate">
            <summary>
            Clicks the update button/link on almost any form on the site. 
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenIBrowseTo(System.String)">
            <summary>
            Browse to the url specified. 
            The test will add "http://" to any url entered.
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.ThenIShouldSeeMySite">
            <summary>
            Checks that the site logo exists on the current page. 
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.GivenIHaveLoggedInAsTheAdmin">
            <summary>
            Logs in as the admin.
            Uses the default values stored by the tests.
            username: 'admin' password: 'dnnhost'
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.GivenIHaveLoggedInAsTheHost">
            <summary>
            Logs in as the admin.
            Uses the default values stored by the tests.
            username: 'host' password: 'dnnhost'
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.GivenIHaveLoggedInAsTheUser(System.String,System.String)">
            <summary>
            Logs in as the user with the username and password specified.
            The user must already exist on the site.
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.IShouldSeeTheLoginScreen">
            <summary>
            Asserts that the Login control is visible
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.ThenIShouldBeLoggedIn">
            <summary>
            Checks that a user has been logged in.
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.ThenIShouldBeLoggedInAsTheUser(System.String)">
            <summary>
            Checks that a user has been logged in to the site and that the users display name is used in the profile link, instead of the text Register.
            Currently this step can only be used for the admin and the host.
            </summary>
            <param name="userName">The users username.</param>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.ThenIShouldSeeALoginError">
            <summary>
            Checks that a login error is displayed in the login module.
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.ThenIShouldNotBeLoggedIn">
            <summary>
            Checks that no user is currently logged in.
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.HostUserMustBeMemberOfPortal">
            <summary>
            Makes the host user a member of portal 0. 
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.DefaultAdminCredentialsForceUpdate">
            <summary>
            Sets the admin's credentials to the default value that is stored within the tests.
            The admin will also be forced to update their password when they log in to the site. 
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.MustBeDefaultAdminCredentials">
            <summary>
            This will set the admin's credentials to the default value that is stored within the tests. 
            The admin will not be forced to update their password when they log in. 
            Use this tag anytime the admin will be logging in to the site.
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.TestSuperUserMustExist">
            <summary>
            Creates a test superuser. 
            Use this for tests that will need an existing superuser to complete the tests.
            The superuser will have the following credentials:
            username: 'TestSuperUser', emails: 'TestSuperUser@dnn.com', first name: 'TestSuperUserFN', last name: 'TestSuperUserLN', display name: 'TestSuperUser DN', password: 'dnnhost'
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.MustHaveUserMustHaveAUserWithFullProfile">
            <summary>
            Adds a user to the site without using the UI. 
            Use this for tests that will need an exisitn user to complete the test, for example when testing the delete user feature, a user must exist so it can be delete. 
            Instead of adding a user within the tests (in a given statement), use this tab. 
            The user will have the following values:
            username: 'atestuser', email: 'testuser@dnn.com', first name: 'testuserFN', last name: 'testuserLN', display name: 'Testuser DN', password: 'dnnhost'
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.MustHaveUser1Added">
            <summary>
            Adds a user to the site without using the UI. 
            Use this for tests that will need an exisitng user to complete the test, for example when testing the delete user feature, a user must exist so it can be delete. 
            Instead of adding a user within the tests (in a given statement), use this tag. 
            The user will have the following values:
            username: 'atestuser', email: 'testuser@dnn.com', first name: 'testuserFN', last name: 'testuserLN', display name: 'Testuser DN', password: 'dnnhost'
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.GivenIHaveClickedOnMyName">
            <summary>
            Clicks on the users display name link. 
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenIClickEditProfile">
            <summary>
            Clicks on the Edit Profile link from a users profile page. 
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenIClickManageProfileTab">
            <summary>
            Clicks on the Manage Profile link from a users profile page. 
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.GivenTheSuperUserExists(TechTalk.SpecFlow.Table)">
            <summary>
            Creates a Superuser with the credentials in the table.
            </summary>
            <param name="table">A table containing the superusers credentials.</param>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.MustHaveKnownFileInFileManager">
            <summary>
            Makes the host user a member of portal 0. 
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenICreateTheModuleWithSameAsPageVisibility(System.String,System.String,System.String)">
            <summary>
            Creates an HTML module with the the title and visibility specified.
            Then adds the content specified to the module.
            </summary>
            <param name="moduleName">The module title.</param>
            <param name="visibility">The visibility for the module.
            One of the two visibility options must be used Same As Page or Page Editors Only.
            Options are case sensitive and must be entered exactly as listed previously.</param>
            <param name="moduleContent">The content that will be added to the module.</param>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenIUpdateTheModuleWithTheContent(System.String)">
            <summary>
            Updates the content specified to the HTML Pro.
            </summary>
            <param name="moduleContent">The content that will be added to the module.</param>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenICreateTheModuleWithSameAsPageVisibility(System.String,System.String)">
            <summary>
            Creates an HTML module with the the title and visibility specified.
            </summary>
            <param name="moduleName">The module title.</param>
            <param name="visibility">The visibility for the module.
            One of the two visibility options must be used Same As Page or Page Editors Only.
            Options are case sensitive and must be entered exactly as listed previously.</param>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenIEditOneOfTheHtmlModuleContent">
            <summary>
            Edits the first HTML module on the page.
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenIEditRadTextEditor(System.String)">
            <summary>
            Adds the text to the HTML module.
            </summary>
            <param name="moduleContent">The content that will be added to the module.</param>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenIClickHyperLinkManagerButtonInRadTextEditor(System.String)">
            <summary>
            Adds the text to the HTML module and selects it all.
            </summary>
            <param name="moduleContent">The content that will be added to the module.</param>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenIClickTelerikEditorHyperLinkButton">
            <summary>
            Clicks the Document Manager button in the Telerik Rich Text Editor.
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenISelectTheFolder(System.String)">
            <summary>
            Selects the document to be linked to and then inserts the link to the document selected.
            </summary>
        </member>
        <member name="M:DotNetNuke.Tests.Steps.BaseSteps.WhenIInsertADocument(System.String)">
            <summary>
            Selects the document to be linked to and then inserts the link to the document selected.
            </summary>
            <param name="documentName">The document in the Document Manager to link to.</param>
        </member>
    </members>
</doc>
