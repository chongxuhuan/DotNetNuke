// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DotNetNuke.Website.Specs.Modules
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Module Permissions")]
    public partial class ModulePermissionsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ModulePermissions.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Module Permissions", "In order to manage the access to features of a module\r\nAs an administrator\r\nI wan" +
                    "t to be able to set the permissions for each role", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User With Manage Settings permission can change settings")]
        [NUnit.Framework.CategoryAttribute("MustBeDefaultAdminCredentials")]
        [NUnit.Framework.CategoryAttribute("MustHaveAUserWithFullProfile")]
        public virtual void UserWithManageSettingsPermissionCanChangeSettings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User With Manage Settings permission can change settings", new string[] {
                        "MustBeDefaultAdminCredentials",
                        "MustHaveAUserWithFullProfile"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("I am on the site home page");
#line 10
 testRunner.And("I have logged in as the admin");
#line 11
 testRunner.And("I have created the default page called Manage Settings from the Ribbon Bar");
#line 12
 testRunner.And("The page Manage Settings has View permission set to Grant for the role Registered" +
                    " Users");
#line 13
 testRunner.And("The page Manage Settings has Add permission set to Grant for the role Registered " +
                    "Users");
#line 14
 testRunner.And("The page Manage Settings has Add Content permission set to Grant for the role Reg" +
                    "istered Users");
#line 15
 testRunner.And("The page Manage Settings has Delete permission set to Grant for the role Register" +
                    "ed Users");
#line 16
 testRunner.And("I am viewing the page called Manage Settings");
#line 17
 testRunner.And("I edit one of the html module content");
#line 18
 testRunner.And("I enter the text Manage This Module in rad text editor");
#line 19
 testRunner.And("I click Save on the Html Module");
#line 20
 testRunner.When("I go to the Module 0 Permissions tab");
#line 21
 testRunner.And("I Uncheck Inherit View Permissions");
#line 22
 testRunner.And("The View permission is set to Grant for the role Registered Users");
#line 23
 testRunner.And("I log off");
#line 24
 testRunner.And("I have logged in as the user MichaelWoods password1234");
#line 25
 testRunner.And("I am viewing the page called Manage Settings");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
